<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: c++ | 喜乐]]></title>
  <link href="http://zodiac1111.github.com/blog/categories/c-/atom.xml" rel="self"/>
  <link href="http://zodiac1111.github.com/"/>
  <updated>2012-09-04T21:46:54+08:00</updated>
  <id>http://zodiac1111.github.com/</id>
  <author>
    <name><![CDATA[zodiac1111]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[cpp_class_overload]]></title>
    <link href="http://zodiac1111.github.com/blog/2012/08/22/cpp-class-overload/"/>
    <updated>2012-08-22T20:37:00+08:00</updated>
    <id>http://zodiac1111.github.com/blog/2012/08/22/cpp-class-overload</id>
    <content type="html"><![CDATA[<h1>运算符重载</h1>

<p>函数重载 参数列表必须不同<br>
运算符重载,所有运算符都能.<br>
C++一种面向对象的语言/面向应用.(放大软件的规模)</p>

<p><strong>问题由来:例如两个类的相加,怎么实现?</strong></p>

<p>例:人民币类 元/角</p>

<pre><code>RMB m1,m2,m3;
m3=m1+m2;//两个对象相加
m3.display();
m3++;//单目运算.
</code></pre>

<!-- more -->


<hr />

<p>站在编译器角度,把'+'视为一个特殊的函数.类似lisp中(+ 1 2).即运算符是一类特殊的函数,所以可以<strong>函数的重载</strong><br>
声明中:</p>

<pre><code>RMB operator +(RMB&amp; ,RMB&amp; ); //双目运算基本返回给别的值,对象调用拷贝构造函数
RMB&amp; operator ++(RMB&amp; ) //单目运算结果返回本身
</code></pre>

<p>RMB:返回值<br>
operator + :特殊的函数名 <br>
(RMB&amp; ,RMB&amp;) :参数列表<br></p>

<p>一般定义为类的成员函数,即例如加法一定是<strong>当前对象</strong>本身 加上另外一个对象.</p>

<pre><code>RMB RMB::operator + (RMB&amp; s) //双目加法 一个参数是对象本身.
RMB RMB::operator ++() //自加 
</code></pre>

<p>注意:运算符结合性.</p>

<p>单目运算结合性? ++() ++(int)?</p>

<p>赋值 =重载:</p>

<pre><code>//代码
name &amp; operator = (name &amp;s)
{
    //在返回前做自己需要的操作,即重载=.
    delname();
    copyname();
    //返回
return *this;
}
</code></pre>

<hr />

<p><strong>重载操作符必须具有一个类类型操作数</strong>
除了函数调用操作符之外，重载操作符的形参数目（包括成员函数的隐式 this 指针）与操作符的操作数数目相同。函数调用操作符可以接受任意数目的操作数。
1.  可重载的操作符(42个)</p>

<pre><code>+ - * / % ^ &amp; | ~ ! , = &lt; &gt; &lt;= &gt;= ++ --
&lt;&lt; &gt;&gt; == != &amp;&amp; || += -= /= %= ^= &amp;= |= 
*= &lt;&lt;= &gt;&gt;= [] () -&gt; -&gt;* new new [] delete delete [] 
</code></pre>

<ol>
<li><p>不能重载(4个)</p>

<p> ::    .*   .    ?:
通过连接其他合法符号可以创建新的操作符。例如，定义一个 operator** 以提供求幂运算是合法的。</p></li>
</ol>


<h3>优先级和结合性是固定的</h3>

<h3>不再具备短路求值特性</h3>

<h3>不要重载具有内置含义的操作符</h3>

<p> 重载逗号、取地址、逻辑与、逻辑或等等操作符通常不是好做法。这些操作符具有有用的内置含义，如果我们定义了自己的版本，就不能再使用这些内置含义。</p>

<h4>选择成员或非成员实现</h4>

<p>为类设计重载操作符的时候，必须选择是将操作符设置为类成员还是普通非成员函数。在某些情况下，程序员没有选择，操作符必须是成员；在另一些情况下，有些经验原则可指导我们做出决定。下面是一些指导原则，有助于决定将操作符设置为类成员还是普通非成员函数：</p>

<ul>
<li>赋值（=）、下标（[]）、调用（()）和成员访问箭头（->）等操作符必须定义为成员，将这些操作符定义为非成员函数将在编译时标记为错误。</li>
<li>像赋值一样，复合赋值操作符通常应定义为类的成员，与赋值不同的是，不一定非得这样做，如果定义非成员复合赋值操作符，不会出现编译错误。</li>
<li>改变对象状态或与给定类型紧密联系的其他一些操作符，如自增、自减和解引用，通常就定义为类成员。</li>
<li>对称的操作符，如算术操作符、相等操作符、关系操作符和位操作符，最好定义为普通非成员函数。</li>
<li>作为类成员的重载函数，其形参看起来比操作数数目少 1。作为成员函数的操作符有一个隐含的 this 形参，限定为第一个操作数。</li>
</ul>

]]></content>
  </entry>
  
</feed>
