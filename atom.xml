<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[喜乐]]></title>
  <link href="http://zodiac1111.github.com/atom.xml" rel="self"/>
  <link href="http://zodiac1111.github.com/"/>
  <updated>2012-11-11T13:37:51+08:00</updated>
  <id>http://zodiac1111.github.com/</id>
  <author>
    <name><![CDATA[zodiac1111]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[lua实现简单的wireshark自定义协议解析]]></title>
    <link href="http://zodiac1111.github.com/blog/2012/11/11/lua-wireshark-plug-in/"/>
    <updated>2012-11-11T13:27:00+08:00</updated>
    <id>http://zodiac1111.github.com/blog/2012/11/11/lua-wireshark-plug-in</id>
    <content type="html"><![CDATA[<h3>主要参考:</h3>

<ol>
<li>简单参考中文 <a href="http://yoursunny.com/study/IS409/ScoreBoard.htm">http://yoursunny.com/study/IS409/ScoreBoard.htm</a></li>
<li>位操作 参考 <a href="http://blog.chinaunix.net/uid-24931444-id-3372735.html">http://blog.chinaunix.net/uid-24931444-id-3372735.html</a></li>
<li>api定义参考 <a href="http://www.wireshark.org/docs/wsug_html_chunked/lua_module_Proto.html">http://www.wireshark.org/docs/wsug_html_chunked/lua_module_Proto.html</a></li>
</ol>


<h3>使用的功能:</h3>

<ol>
<li>按位解析 <code>f_vsq_num</code></li>
<li>分类解析  <code>if bit.rshift(bit.band(buf(4,1):uint(), 0x40), 6) == 1 then</code></li>
<li>位操作 <code>bit.rshift(bit.band(buf(4,1):uint(), 0x40), 6)</code></li>
<li>树添加 <code>local farmehead = t:add(f_farmehead,buf(0,4))</code></li>
<li>分成函数实现 <code>function FT_change_farme(buf,pkt,root) ... end</code></li>
<li>按大小端解析16位整型数据,并添加进树 <code>local addr=t:add_le(f_addr,buf(2,2))</code></li>
<li>按字节流形式添加整体和各个部分的解释 <code>ProtoField.bytes("sd102.Tb","时间(Tb)",base.HEX)</code></li>
</ol>


<h3>代码</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-- lua wireshark 山东102协议插件. file:hello.lua
</span><span class='line'>--简单参考中文 http://yoursunny.com/study/IS409/ScoreBoard.htm
</span><span class='line'>--位操作 参考 http://blog.chinaunix.net/uid-24931444-id-3372735.html
</span><span class='line'>--api定义参考 http://www.wireshark.org/docs/wsug_html_chunked/lua_module_Proto.html
</span><span class='line'>do
</span><span class='line'>  --函数前向声明
</span><span class='line'>  local FT_farme --解析单字节帧
</span><span class='line'>  local FT_static_farme --解析固定长度帧
</span><span class='line'>  local FT_change_farme --解析变长度帧
</span><span class='line'>
</span><span class='line'>  --协议名称为ScoreBoard，在Packet Details（中间可以展开的那部分）
</span><span class='line'>  --    窗格显示为山东102主站通讯规约
</span><span class='line'>  local p_ScoreBoard = Proto("sd102","山东102",base.DEC)
</span><span class='line'>  --协议的各个字段 标识符/第一字段
</span><span class='line'>  local f_identifier = ProtoField.bytes("sd102.id","标识符/规约号之类") 
</span><span class='line'>  local f_len = ProtoField.uint16("sd102.len","长度(字节)",base.DEC) 
</span><span class='line'>  --所有可能
</span><span class='line'>  local f_start = ProtoField.uint8("sd102.start","起始字节",base.HEX,
</span><span class='line'>  {[0x68]="长帧/变长帧",[0x10]="短帧/固定帧",[0xE5]="应答/单字节帧"})
</span><span class='line'>  local f_ctrl = ProtoField.uint8("sd102.ctrl","控制字节",base.HEX)
</span><span class='line'>  -- 控制端到采集终端 
</span><span class='line'>  local f_funcode = ProtoField.uint8("sd102.funcode","功能码(FC)",base.DEC,
</span><span class='line'>  {[0]="复位通信单元",[3]="传送数据",[9]="召唤链路状态",
</span><span class='line'>  [10]="召唤1级用户数据",[11]="召唤2级用户数据"},0x0F) 
</span><span class='line'>  local f_fcv = ProtoField.uint8("sd102.fcv","帧计数有效位(FCV)",base.HEX,
</span><span class='line'>  {[0]="帧计数位(FCB)的变化无效",[1]="帧计数位(FCB)的变化有效"},0x10) 
</span><span class='line'>  local f_fcb = ProtoField.uint8("sd102.fcb","帧计数位(FCB)",base.HEX,
</span><span class='line'>  {[0]="",[1]=""},0x20)
</span><span class='line'>  local f_prm= ProtoField.uint8("sd102.prm","启动报文位(PRM)",base.HEX,
</span><span class='line'>  {[0]="采集端向控制站传输",[1]="控制站向采集端传输"},0x40) 
</span><span class='line'>  --非平衡传输,根据GBT18657.2-2002 5.1.2,传输方向位保留
</span><span class='line'>  local f_dir= ProtoField.uint8("sd102.dir","备用"--[[ 传输方向位(DIR)--]],base.HEX,
</span><span class='line'>  {[0]="备用为0",[1]="备用,应为0"},0x80) 
</span><span class='line'>  -- 采集终端到控制端
</span><span class='line'>  local f_funcode_rsp = ProtoField.uint8("sd102.funcode_rsp","功能码(FC)",base.DEC,
</span><span class='line'>  {[0]="确认",[1]="链路忙,没有收到报文",[2]="备用",[3]="备用",[4]="备用",[5]="备用",
</span><span class='line'>  [6]="制造厂和用户协商定义",[7]="制造厂和用户协商定义",[8]="以数据回答请求帧",
</span><span class='line'>  [9]="没有所召唤的数据",[11]="以链路状态或访问请求回答请求帧"},0x0F) 
</span><span class='line'>  local f_dfc = ProtoField.uint8("sd102.dfc","数据流控制位(DFC)",base.HEX,
</span><span class='line'>  {[0]="终端可以接收数据",[1]="终端的缓冲区已满"},0x10) 
</span><span class='line'>  local f_acd = ProtoField.uint8("sd102.acd","要求访问位(ACD)",base.HEX,
</span><span class='line'>  {[0]="从站没有1级用户数据要求访问",[1]="从站有1级用户数据要求访问"},0x20) 
</span><span class='line'>  local f_addr= ProtoField.uint16("sd102.addr","地址(uint16)",base.DEC) 
</span><span class='line'>  local f_addr1= ProtoField.uint8("sd102.addr1","地址低字节",base.HEX) 
</span><span class='line'>  local f_addr2= ProtoField.uint8("sd102.addr2","地址高字节",base.HEX)
</span><span class='line'>  local f_p= ProtoField.uint8("sd102.p","校验和",base.HEX)
</span><span class='line'>  local f_end= ProtoField.uint8("sd102.end","结束符",base.HEX,{[0x16]="结束"})
</span><span class='line'>  --变长帧 
</span><span class='line'>  local f_farmehead=ProtoField.uint8("sd102.farmehead","帧头",base.HEX)
</span><span class='line'>  local f_ASDU=ProtoField.uint8("sd102.ASDU","应用服务数据单元",base.HEX)
</span><span class='line'>  local f_len1=ProtoField.uint8("sd102.len1","长度1",base.DEC)
</span><span class='line'>  local f_len2=ProtoField.uint8("sd102.len2","长度2",base.DEC)
</span><span class='line'>  local f_typeID_up=ProtoField.uint8("sd102.typeID2_up","类型标识(TYP)",base.DEC,
</span><span class='line'>  {[0]="未用",[1]="带时标的单点信息",[2]="读电量返回帧",[70]="初始化结束",
</span><span class='line'>  [72]="电能累计量数据终端设备的当前系统时间",
</span><span class='line'>  [128]="电能累计量数据终端系统时间同步确认",
</span><span class='line'>  [162]="读遥测量返回帧",[163]="读需量返回帧"})
</span><span class='line'>  local f_typeID_down=ProtoField.uint8("sd102.typeID2_down","类型标识(TYP)",base.DEC,
</span><span class='line'>  {[102]="读一个所选定时间范围的带时标的单点信息的记录",
</span><span class='line'>  [103]="读电能累计量数据终端设备的当前系统时间",
</span><span class='line'>  [120]="读一个选定的时间范围和一个选定的地址范围的记帐（计费）电能累计量",
</span><span class='line'>  [128]="电能累计量数据终端系统时间同步命令",
</span><span class='line'>  [172]="读一个选定的时间范围和一个选定的地址范围的遥测量",
</span><span class='line'>  [174]="读一个选定的时间范围和一个选定的地址范围的最大需量"})
</span><span class='line'>  local f_vsq=ProtoField.uint8("sd102.vsq","可变结构限定词(VSQ)",base.HEX)
</span><span class='line'>  local f_sq=ProtoField.uint8("sd102.sq","息体寻址方法(SQ)",base.HEX,
</span><span class='line'>  {[0]="每一个单个元素或综合元素由信息体地址寻址",
</span><span class='line'>  [1]="一个顺序的类似的信息元素(见IEC60870-5-3 5.1.5)"},0x80)
</span><span class='line'>  local f_vsq_num=ProtoField.uint8("sd102.vsq_num","可变结构数目",base.HEX,nil,0x7F)
</span><span class='line'>  local f_cot=ProtoField.uint8("sd102.cot","传送原因(Cause Of Transmission)",base.HEX)
</span><span class='line'>  local f_cot_t=ProtoField.uint8("sd102.cot_t","试验(Test)",base.HEX,
</span><span class='line'>  {[0]="未试验",[1]="试验"},0x80)
</span><span class='line'>  local f_cot_pn=ProtoField.uint8("sd102.cot_pn","激活确认",base.HEX,
</span><span class='line'>  {[0]="肯定确认",[1]="否定确认"},0x40)
</span><span class='line'>  local f_cot_cot=ProtoField.uint8("sd102.cot_cot","传送原因",base.DEC,
</span><span class='line'>  {[0]="未用",[1]="试验(专用范围定义)",[2]="周期、循环(专用范围定义)",
</span><span class='line'>  [3]="自发（突发）",[4]="初始化",[5]="请求或被请求",
</span><span class='line'>  [6]="激活(Act)",[7]="激活确认(actcon)",[8]="停止激活(deact)",
</span><span class='line'>  [9]="停止激活确认(deactcon)",[10]="激活终止(actterm)",
</span><span class='line'>  [11]="未用",[12]="未用",[13]="无所请求的数据记录",
</span><span class='line'>  [14]="无所请求的应用服务数据单元――类型",
</span><span class='line'>  [15]="由主站（控制站）发送的应用服务数据单元中的记录序号不可知",
</span><span class='line'>  [16]="由主站（控制站）发送的应用服务数据单元中的地址说明不可知",
</span><span class='line'>  [17]="无所请求的信息体",[18]="无所请求的累计时段",
</span><span class='line'>  [19]="为将来兼容定义保留",--[[[20-41]="未用",
</span><span class='line'>  [42-47]="为将来兼容定义保留",[48-63]="为特殊应用(专用范围)",--]]
</span><span class='line'>  [48]="时间同步(专用范围定义)"},0x3F)
</span><span class='line'>  local f_SlaveAddr=ProtoField.uint8("sd102.SlaveAddr","站地址(Addr)",base.DEC)
</span><span class='line'>  local f_recordAddr=ProtoField.uint8("sd102.recordAddr","信息体地址(IOA)",base.HEX)
</span><span class='line'>  --时间 ,其中有写位没解析 RSE
</span><span class='line'>  local f_Tb = ProtoField.bytes("sd102.Tb","时间(Tb)",base.HEX)
</span><span class='line'>  local f_Tb_ms=ProtoField.uint16("sd102.Tb_ms","毫秒(ms)",base.DEC,nil,0xFF03)
</span><span class='line'>  local f_Tb_sec=ProtoField.uint8("sd102.Tb_sec","秒(sec)",base.DEC,nil,0xFC)
</span><span class='line'>  local f_Tb_min=ProtoField.uint8("sd102.Tb_min","分钟(min)",base.DEC,nil,0x3F)
</span><span class='line'>  local f_Tb_tis=ProtoField.uint8("sd102.Tb_tis","费率陈述",base.HEX,
</span><span class='line'>  {[0]="断开OFF",[1]="合上ON"},0x40)
</span><span class='line'>  local f_Tb_iv=ProtoField.uint8("sd102.Tb_iv","时间陈述无效标志",base.HEX,
</span><span class='line'>  {[0]="有效",[1]="无效"},0x80)
</span><span class='line'>  local f_Tb_hour=ProtoField.uint8("sd102.Tb_hour","小时(hour)",base.DEC,nil,0x1F)
</span><span class='line'>  local f_Tb_day=ProtoField.uint8("sd102.Tb_day","日(day)",base.DEC,nil,0x1F)
</span><span class='line'>  local f_Tb_week=ProtoField.uint8("sd102.Tb_week","周次(week)",base.DEC,nil,0xE0)
</span><span class='line'>  local f_Tb_mon=ProtoField.uint8("sd102.Tb_mon","月(month)",base.DEC,nil,0x0F)
</span><span class='line'>  local f_Tb_year=ProtoField.uint8("sd102.Tb_year","年(year)",base.DEC,nil,0x7F)
</span><span class='line'>  local f_Tb_su=ProtoField.uint8("sd102.Tb_su","标准时间(SU)",
</span><span class='line'>  base.HEX,{[0]="标准时间",[1]="夏时制"},0x80)
</span><span class='line'>  local f_Tb_pti=ProtoField.uint8("sd102.Tb_pti","功率费率",
</span><span class='line'>  base.HEX,{[0]="功率费率"},0xC0)
</span><span class='line'>  local f_Tb_eti=ProtoField.uint8("sd102.Tb_eti","能量费率",
</span><span class='line'>  base.HEX,{[0]="能量费率"},0x30)
</span><span class='line'>  local f_msgaddr_start = ProtoField.uint8("sd102.msgaddr","起始消息体地址",base.DEC)
</span><span class='line'>  local f_msgaddr_end = ProtoField.uint8("sd102.msgaddr","终止消息体地址",base.DEC)
</span><span class='line'>  local f_msg = ProtoField.string("sd102.msg","消息")
</span><span class='line'>  --Ta
</span><span class='line'>  local f_Ta = ProtoField.bytes("sd102.Ta","时间(Ta)",base.HEX)
</span><span class='line'>  local f_Ta_min = ProtoField.uint8("sd102.Ta_min","分钟(min)",base.HEX,nil,0x3F)
</span><span class='line'>  local f_Ta_hour = ProtoField.uint8("sd102.Ta_hour","小时(hour)",base.HEX,nil,0x1F)
</span><span class='line'>  local f_Ta_day = ProtoField.uint8("sd102.Ta_day","日(day)",base.HEX,nil,0x3F)
</span><span class='line'>  local f_Ta_week = ProtoField.uint8("sd102.Ta_week","周次(week)",base.HEX,nil,0xE0)
</span><span class='line'>  local f_Ta_mon = ProtoField.uint8("sd102.Ta_mon","月(month)",base.HEX,nil,0x0F)
</span><span class='line'>  local f_Ta_year = ProtoField.uint8("sd102.Ta_year","年(year)",base.HEX,nil,0x7F)
</span><span class='line'>
</span><span class='line'>  -- 操作,第二字段
</span><span class='line'>  local f_operator = ProtoField.uint8("sd102.operator","操作",base.HEX,
</span><span class='line'>  --这个字段的数字值都有相应的含义，可以自动对应成字符串
</span><span class='line'>  { [0] = "取值", [1] = "设定值", [128] = "设定值,应答",
</span><span class='line'>  [0x10] = "取颜色", [17] = "设定颜色", [144] = "设定颜色,应答"})
</span><span class='line'>  --所有可能的字段都要定义，到时没有t:add就不会显示
</span><span class='line'>  local f_left = ProtoField.uint32("sd102.left","左边数值",base.DEC)
</span><span class='line'>  local f_right = ProtoField.uint32("sd102.right","右边数值",base.DEC)
</span><span class='line'>  local f_red = ProtoField.uint8("sd102.red","红色",base.DEC)
</span><span class='line'>  local f_green = ProtoField.uint8("sd102.green","绿色",base.DEC)
</span><span class='line'>  local f_blue = ProtoField.uint8("sd102.blue","蓝色",base.DEC)
</span><span class='line'>  local f_onebyte = ProtoField.uint8("sd102.onebyte","单字节",base.HEX)
</span><span class='line'>  p_ScoreBoard.fields = { f_identifier, f_operator, f_left, f_right, f_red, f_green,          f_blue,f_onebyte,f_len,
</span><span class='line'>  f_start,f_funcode,f_funcode_rsp,f_ctrl,
</span><span class='line'>  f_fcv,f_dfc,f_fcb,f_acd,f_prm,f_dir,f_addr,f_addr1,f_addr2,f_p,f_end,
</span><span class='line'>  f_farmehead,f_len1,f_len2,f_ASDU,f_typeID_up,f_typeID_down,f_vsq,f_sq,f_vsq_num,
</span><span class='line'>  f_cot,f_cot_t,f_cot_pn,f_cot_cot,f_SlaveAddr,f_recordAddr,
</span><span class='line'>  f_Tb,f_Tb_ms,f_Tb_sec,f_Tb_min,f_Tb_tis,f_Tb_iv,f_Tb_hour,f_Tb_day,f_Tb_week, --Tb
</span><span class='line'>  f_Tb_mon,f_Tb_year,f_Tb_su,f_Tb_pti,f_Tb_eti,
</span><span class='line'>  f_msgaddr_start,f_msgaddr_end,
</span><span class='line'>  f_Ta, f_Ta_min,f_Ta_hour,f_Ta_day,f_Ta_week,f_Ta_mon,f_Ta_year} --Ta
</span><span class='line'>
</span><span class='line'>  local data_dis = Dissector.get("data")
</span><span class='line'>  -- 函数:解码
</span><span class='line'>  local function ScoreBoard_dissector(buf,pkt,root)
</span><span class='line'>      local buf_len = buf:len();
</span><span class='line'>      if buf_len &lt; 1 then  --长度 &lt; 1 绝对错误
</span><span class='line'>          return false
</span><span class='line'>      end
</span><span class='line'>      if buf(0,1):uint() == 0xe5 then --1.单字节帧解析
</span><span class='line'>          FT_farme(buf,pkt,root)
</span><span class='line'>          return true
</span><span class='line'>      end 
</span><span class='line'>      if buf(0,1):uint() == 0x10 then --2.固定帧长帧解析
</span><span class='line'>          FT_static_farme(buf,pkt,root)
</span><span class='line'>          return true
</span><span class='line'>      end 
</span><span class='line'>      if buf(0,1):uint() == 0x68 then --3.变帧长帧解析
</span><span class='line'>          FT_change_farme(buf,pkt,root)
</span><span class='line'>          return true
</span><span class='line'>      else
</span><span class='line'>          return false
</span><span class='line'>      end 
</span><span class='line'>
</span><span class='line'>      if buf_len &lt; 17 then return false end
</span><span class='line'>      --取得前16字节identifier字段的值
</span><span class='line'>      local v_identifier = buf(0,16)
</span><span class='line'>      --验证identifier是否正确
</span><span class='line'>      if ((buf(0,1):uint()~=226) or (buf(1,1):uint()~=203) or (buf(2,1):uint()~=181)
</span><span class='line'>          or (buf(3,1):uint()~=128) or (buf(4,1):uint()~=203) or (buf(5,1):uint()~=9)
</span><span class='line'>          or (buf(6,1):uint()~=78) or (buf(7,1):uint()~=186) or (buf(8,1):uint()~=163)
</span><span class='line'>          or (buf(9,1):uint()~=107) or (buf(10,1):uint()~=246) or (buf(11,1):uint()~=7)
</span><span class='line'>          or (buf(12,1):uint()~=206) or (buf(13,1):uint()~=149) or (buf(14,1):uint()~=63)
</span><span class='line'>          or (buf(15,1):uint()~=43)) then
</span><span class='line'>          --不正确就不是我的协议  
</span><span class='line'>          return false 
</span><span class='line'>      end
</span><span class='line'>      --取得operator的值
</span><span class='line'>      local v_operator = buf(16,1)
</span><span class='line'>      local i_operator = v_operator:uint()
</span><span class='line'>
</span><span class='line'>      --现在知道是我的协议了，放心大胆添加Packet Details
</span><span class='line'>      --开始添加显示的东西
</span><span class='line'>      local t = root:add(p_ScoreBoard,buf) --添加协议
</span><span class='line'>      --在Packet List窗格的Protocol列
</span><span class='line'>      pkt.cols.protocol = "102" --显示在第一栏的协议名称
</span><span class='line'>      t:add(f_identifier,v_identifier) --域1 标识符
</span><span class='line'>      t:add(f_operator,v_operator) --域2 操作符
</span><span class='line'>      -- 域3 操作数,分三种
</span><span class='line'>      if ((i_operator == 1) or (i_operator == 128)) and (buf_len &gt;= 25) then
</span><span class='line'>          --把存在的字段逐个添加进去
</span><span class='line'>          t:add(f_left,buf(17,4))
</span><span class='line'>          t:add(f_right,buf(21,4))
</span><span class='line'>      elseif ((i_operator == 17) or (i_operator == 144)) and (buf_len &gt;= 20) then
</span><span class='line'>          t:add(f_red,buf(17,1))
</span><span class='line'>          t:add(f_green,buf(18,1))
</span><span class='line'>          t:add(f_blue,buf(19,1))
</span><span class='line'>      elseif i_operator == 0 then
</span><span class='line'>          t:add("取值操作 不需要操作数")
</span><span class='line'>      elseif i_operator == 0x10 then
</span><span class='line'>          t:add("取值颜色 不需要操作数")
</span><span class='line'>      else
</span><span class='line'>          t:add("未知的操作符!")
</span><span class='line'>      end
</span><span class='line'>
</span><span class='line'>      return true
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  -- **********解析单字节数据帧函数************
</span><span class='line'>  function FT_farme(buf,pkt,root)
</span><span class='line'>      --local p_ScoreBoard = Proto("sd102","山东102")
</span><span class='line'>      --p_ScoreBoard.fields = {f_onebyte}
</span><span class='line'>      --添加协议
</span><span class='line'>      local t = root:add(p_ScoreBoard,buf,nil,"长度=",f_len,buf:len(),"字节") 
</span><span class='line'>      pkt.cols.protocol = "sd102-单字符" --显示在第一栏的协议名称
</span><span class='line'>      t:add(f_start,buf(0,1)) 
</span><span class='line'>      --t:add("单字节数据")
</span><span class='line'>      return true
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  --************短帧/固定长帧*********
</span><span class='line'>  function FT_static_farme(buf,pkt,root)
</span><span class='line'>      local len = buf:len();
</span><span class='line'>      --添加协议
</span><span class='line'>      local t = root:add(p_ScoreBoard,buf(0,len),nil,"长度=",f_len,buf:len(),"字节") 
</span><span class='line'>      pkt.cols.protocol = "sd102-定长帧" --显示在第一栏的协议名称
</span><span class='line'>      --开始判断:
</span><span class='line'>      if len ~= 6 then --短帧的长度固定,长度不对,错误
</span><span class='line'>          t:add("len != 6 ,len=",len)
</span><span class='line'>          return false
</span><span class='line'>      end
</span><span class='line'>      if buf(5,1):uint() ~= 0x16 then --结束符错误
</span><span class='line'>          t:add("结束符!=0x16,结束符=",buf(5,1):uint())
</span><span class='line'>          return false
</span><span class='line'>      end
</span><span class='line'>      --校验和
</span><span class='line'>      --全部判断完成:
</span><span class='line'>
</span><span class='line'>      t:add(f_start,buf(0,1)) 
</span><span class='line'>      local ctrlbyte = t:add(f_ctrl,buf(1,1))
</span><span class='line'>      if bit.rshift(bit.band(buf(1,1):uint(), 0x40), 6) == 1 then --控制站向采集端
</span><span class='line'>          ctrlbyte:add(f_funcode,buf(1,1))
</span><span class='line'>          ctrlbyte:add(f_fcv,buf(1,1))
</span><span class='line'>          ctrlbyte:add(f_fcb,buf(1,1))
</span><span class='line'>          ctrlbyte:add(f_prm,buf(1,1))
</span><span class='line'>          ctrlbyte:add(f_dir,buf(1,1))
</span><span class='line'>      else --采集端 向控制端
</span><span class='line'>          ctrlbyte:add(f_funcode_rsp,buf(1,1))
</span><span class='line'>          ctrlbyte:add(f_dfc,buf(1,1))
</span><span class='line'>          ctrlbyte:add(f_acd,buf(1,1))
</span><span class='line'>          ctrlbyte:add(f_prm,buf(1,1))
</span><span class='line'>          ctrlbyte:add(f_dir,buf(1,1))
</span><span class='line'>      end
</span><span class='line'>      local addr=t:add_le(f_addr,buf(2,2)) 
</span><span class='line'>      addr:add(f_addr1,buf(2,1)) 
</span><span class='line'>      addr:add(f_addr2,buf(3,1))
</span><span class='line'>      t:add(f_p,buf(4,1)) 
</span><span class='line'>      t:add(f_end,buf(5,1)) 
</span><span class='line'>      --t:add("单字节数据") 
</span><span class='line'>      return true
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  --**********长帧/变长帧**************
</span><span class='line'>  function FT_change_farme(buf,pkt,root)
</span><span class='line'>      local len = buf:len();
</span><span class='line'>      --添加协议
</span><span class='line'>      local t = root:add(p_ScoreBoard,buf(0,len),nil,"长度=",f_len,buf:len(),"字节") 
</span><span class='line'>      pkt.cols.protocol = "sd102-变长帧" --显示在第一栏的协议名称
</span><span class='line'>      --开始判断:
</span><span class='line'>      if len &lt; 6 then --长度太小错误
</span><span class='line'>          t:add("长度太小:",len)
</span><span class='line'>          return false
</span><span class='line'>      end
</span><span class='line'>      if buf(3,1):uint() ~= 0x68 then --帧边界 两个0x68
</span><span class='line'>          t:add("边界不等于0x68",buf(3,1):uint())
</span><span class='line'>          return false
</span><span class='line'>      end
</span><span class='line'>      if buf(1,1):uint() ~= buf(2,1):uint() then --两个长度必须相同
</span><span class='line'>          t:add("长度不等",buf(1,1):uint(),buf(2,1):uint())
</span><span class='line'>          return false
</span><span class='line'>      end
</span><span class='line'>      if buf(len-1,1):uint() ~= 0x16 then --结束符错误
</span><span class='line'>          return false
</span><span class='line'>      end
</span><span class='line'>      --全部判断完成:
</span><span class='line'>      t:add(f_start,buf(0,1)) 
</span><span class='line'>      local farmehead = t:add(f_farmehead,buf(0,4))
</span><span class='line'>      farmehead:add(f_start,buf(0,1))
</span><span class='line'>      farmehead:add(f_len1,buf(1,1))
</span><span class='line'>      farmehead:add(f_len2,buf(2,1))
</span><span class='line'>      farmehead:add(f_start,buf(3,1))
</span><span class='line'>      local ctrlbyte = t:add(f_ctrl,buf(4,1))
</span><span class='line'>      if bit.rshift(bit.band(buf(4,1):uint(), 0x40), 6) == 1 then --控制站向采集端
</span><span class='line'>          ctrlbyte:add(f_funcode,buf(4,1))
</span><span class='line'>          ctrlbyte:add(f_fcv,buf(4,1))
</span><span class='line'>          ctrlbyte:add(f_fcb,buf(4,1))
</span><span class='line'>          ctrlbyte:add(f_prm,buf(4,1))
</span><span class='line'>          ctrlbyte:add(f_dir,buf(4,1))
</span><span class='line'>      else --采集端 向控制端
</span><span class='line'>          ctrlbyte:add(f_funcode_rsp,buf(4,1))
</span><span class='line'>          ctrlbyte:add(f_dfc,buf(4,1))
</span><span class='line'>          ctrlbyte:add(f_acd,buf(4,1))
</span><span class='line'>          ctrlbyte:add(f_prm,buf(4,1))
</span><span class='line'>          ctrlbyte:add(f_dir,buf(1,1))
</span><span class='line'>      end
</span><span class='line'>      t:add(f_addr1,buf(5,1)) 
</span><span class='line'>      t:add(f_addr2,buf(6,1))
</span><span class='line'>      if bit.rshift(bit.band(buf(4,1):uint(), 0x40), 6) == 1 then --控制站向采集端
</span><span class='line'>          t:add(f_typeID_down,buf(7,1))
</span><span class='line'>      else --采集端 向控制端
</span><span class='line'>          t:add(f_typeID_up,buf(7,1))
</span><span class='line'>      end
</span><span class='line'>      local vsq = t:add(f_vsq,buf(8,1))
</span><span class='line'>      vsq:add(f_sq,buf(8,1))
</span><span class='line'>      vsq:add(f_vsq_num,buf(8,1))
</span><span class='line'>      local cot = t:add(f_cot,buf(9,1))
</span><span class='line'>      cot:add(f_cot_t,buf(9,1))
</span><span class='line'>      cot:add(f_cot_pn,buf(9,1))
</span><span class='line'>      cot:add(f_cot_cot,buf(9,1))
</span><span class='line'>      t:add(f_SlaveAddr,buf(10,2))
</span><span class='line'>      t:add(f_recordAddr,buf(12,1))
</span><span class='line'>      --按上下行分类
</span><span class='line'>      if bit.rshift(bit.band(buf(4,1):uint(), 0x40), 6) == 1 then --下行
</span><span class='line'>          --按TYP分类
</span><span class='line'>          if buf(7,1):uint() == 103 then --读终端时间,
</span><span class='line'>              --什么都不做,信息体为空
</span><span class='line'>          elseif buf(7,1):uint() == 128 then --设置终端时间
</span><span class='line'>              local Tb = t:add(f_Tb,buf(13,7))            
</span><span class='line'>              Tb:add(f_Tb_ms,buf(13,2))
</span><span class='line'>              Tb:add(f_Tb_sec,buf(14,1))
</span><span class='line'>              Tb:add(f_Tb_min,buf(15,1))
</span><span class='line'>              Tb:add(f_Tb_tis,buf(15,1))
</span><span class='line'>              Tb:add(f_Tb_iv,buf(15,1))
</span><span class='line'>              Tb:add(f_Tb_hour,buf(16,1))
</span><span class='line'>              Tb:add(f_Tb_su,buf(16,1))
</span><span class='line'>              Tb:add(f_Tb_day,buf(17,1))
</span><span class='line'>              Tb:add(f_Tb_week,buf(17,1))
</span><span class='line'>              Tb:add(f_Tb_mon,buf(18,1))
</span><span class='line'>              Tb:add(f_Tb_pti,buf(18,1))
</span><span class='line'>              Tb:add(f_Tb_eti,buf(18,1))
</span><span class='line'>              Tb:add(f_Tb_year,buf(19,1))
</span><span class='line'>              --读一个选定的时间范围和一个选定的地址范围的记帐（计费）电能累计量
</span><span class='line'>          elseif buf(7,1):uint() == 120 then 
</span><span class='line'>              t:add(f_msgaddr_start,buf(13,1))
</span><span class='line'>              t:add(f_msgaddr_end,buf(14,1))
</span><span class='line'>              local Ta_start = t:add(f_Ta,buf(15,5))
</span><span class='line'>              Ta_start:add(f_Ta_year,buf(19,1))
</span><span class='line'>              Ta_start:add(f_Ta_mon,buf(18,1))
</span><span class='line'>              Ta_start:add(f_Ta_day,buf(17,1))
</span><span class='line'>              Ta_start:add(f_Ta_hour,buf(16,1))
</span><span class='line'>              Ta_start:add(f_Ta_min,buf(15,1))
</span><span class='line'>              Ta_start:add(f_Ta_week,buf(17,1))
</span><span class='line'>              local Ta_end = t:add(f_Ta,buf(20,5))
</span><span class='line'>              Ta_end:add(f_Ta_year,buf(24,1))
</span><span class='line'>              Ta_end:add(f_Ta_mon,buf(23,1))
</span><span class='line'>              Ta_end:add(f_Ta_day,buf(22,1))
</span><span class='line'>              Ta_end:add(f_Ta_hour,buf(21,1))
</span><span class='line'>              Ta_end:add(f_Ta_min,buf(20,1))
</span><span class='line'>              Ta_end:add(f_Ta_week,buf(22,1))
</span><span class='line'>          end
</span><span class='line'>      else --上行 
</span><span class='line'>          if buf(7,1):uint() == 72 then --返回当前系统时间
</span><span class='line'>              local Tb = t:add(f_Tb,buf(13,7))            
</span><span class='line'>              Tb:add(f_Tb_ms,buf(13,2))
</span><span class='line'>              Tb:add(f_Tb_sec,buf(14,1))
</span><span class='line'>              Tb:add(f_Tb_min,buf(15,1))
</span><span class='line'>              Tb:add(f_Tb_tis,buf(15,1))
</span><span class='line'>              Tb:add(f_Tb_iv,buf(15,1))
</span><span class='line'>              Tb:add(f_Tb_hour,buf(16,1))
</span><span class='line'>              Tb:add(f_Tb_su,buf(16,1))
</span><span class='line'>              Tb:add(f_Tb_day,buf(17,1))
</span><span class='line'>              Tb:add(f_Tb_week,buf(17,1))
</span><span class='line'>              Tb:add(f_Tb_mon,buf(18,1))
</span><span class='line'>              Tb:add(f_Tb_pti,buf(18,1))
</span><span class='line'>              Tb:add(f_Tb_eti,buf(18,1))
</span><span class='line'>              Tb:add(f_Tb_year,buf(19,1))
</span><span class='line'>              --Tb:add("上行,72")
</span><span class='line'>          elseif buf(7,1):uint() == 128 then --电能累计量数据终端系统时间同步确认
</span><span class='line'>              local Tb = t:add(f_Tb,buf(13,7))            
</span><span class='line'>              Tb:add(f_Tb_ms,buf(13,2))
</span><span class='line'>              Tb:add(f_Tb_sec,buf(14,1))
</span><span class='line'>              Tb:add(f_Tb_min,buf(15,1))
</span><span class='line'>              Tb:add(f_Tb_tis,buf(15,1))
</span><span class='line'>              Tb:add(f_Tb_iv,buf(15,1))
</span><span class='line'>              Tb:add(f_Tb_hour,buf(16,1))
</span><span class='line'>              Tb:add(f_Tb_su,buf(16,1))
</span><span class='line'>              Tb:add(f_Tb_day,buf(17,1))
</span><span class='line'>              Tb:add(f_Tb_week,buf(17,1))
</span><span class='line'>              Tb:add(f_Tb_mon,buf(18,1))
</span><span class='line'>              Tb:add(f_Tb_pti,buf(18,1))
</span><span class='line'>              Tb:add(f_Tb_eti,buf(18,1))
</span><span class='line'>              Tb:add(f_Tb_year,buf(19,1))
</span><span class='line'>          end
</span><span class='line'>      end
</span><span class='line'>      -- 结束
</span><span class='line'>      t:add(f_p,buf(len-2,1))
</span><span class='line'>      t:add(f_end,buf(len-1,1))
</span><span class='line'>      return true
</span><span class='line'>  end
</span><span class='line'>  -- 全局函数?api?
</span><span class='line'>  function p_ScoreBoard.dissector(buf,pkt,root) 
</span><span class='line'>      if ScoreBoard_dissector(buf,pkt,root) then
</span><span class='line'>          --valid ScoreBoard diagram
</span><span class='line'>      else
</span><span class='line'>          --data这个dissector几乎是必不可少的；当发现不是我的协议时，就应该调用data
</span><span class='line'>          data_dis:call(buf,pkt,root)
</span><span class='line'>      end
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  local tcp_encap_table = DissectorTable.get("tcp.port")
</span><span class='line'>  --只需要处理UDP1127端口就可以了
</span><span class='line'>  tcp_encap_table:add(10003,p_ScoreBoard)
</span><span class='line'>  tcp_encap_table:add(10004,p_ScoreBoard)
</span><span class='line'>  tcp_encap_table:add(10005,p_ScoreBoard)
</span><span class='line'>  tcp_encap_table:add(35243,p_ScoreBoard)
</span><span class='line'>  tcp_encap_table:add(50187,p_ScoreBoard)
</span><span class='line'>  --udp_encap_table:add(10003,p_ScoreBoard)
</span><span class='line'>  --udp_encap_table:add(10001,p_ScoreBoard)
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编译 goldendict 笔记]]></title>
    <link href="http://zodiac1111.github.com/blog/2012/09/29/build-goldendict-from-source/"/>
    <updated>2012-09-29T22:30:00+08:00</updated>
    <id>http://zodiac1111.github.com/blog/2012/09/29/build-goldendict-from-source</id>
    <content type="html"><![CDATA[<p>官网:<a href="http://goldendict.org/">http://goldendict.org/</a>.</p>

<p>官方编译介绍:<a href="http://goldendict.org/buildfromgit.php">http://goldendict.org/buildfromgit.php</a>.</p>

<p>在Fedora 17上编译可能出现的一些小问题:</p>

<p><strong>1.</strong><code>articleview.hh:7:20: 致命错误：QWebView：没有那个文件或目录</code></p>

<p>缺少qt的某个东西的头文件,安装即可:<code>yum install qtwebkit-devel</code></p>

<p><strong>2.</strong><code>hotkeywrapper.hh:11:35: 致命错误：X11/extensions/record.h：没有那个文件或目录</code></p>

<p>缺少X11开发用的头文件,安装:<code>yum install libXtst-devel</code></p>

<p><strong>3.</strong><code>articleview.cc:37:32:致命错误：phonon/audiooutput.h：没有那个文件或phonon-devel.i686目录</code></p>

<p>安装:<code>yum install phonon-devel</code></p>

<p><strong>4.</strong><code>decompress.cc:5:19: 致命错误：bzlib.h：没有那个文件或目录</code></p>

<p>安装:<code>yum install bzip2-devel</code></p>

<p><strong>5.</strong>安装到应用程序目录</p>

<p>执行完<code>make</code>之后可以执行<code>su -c 'make install'</code>将图标等复制到特定的目录中.</p>

<h2>goldendict词典下载</h2>

<p>星际译王词典:<a href="http://abloz.com/huzheng/stardict-dic">http://abloz.com/huzheng/stardict-dic</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 githubRepoWidget 展示 github 项目]]></title>
    <link href="http://zodiac1111.github.com/blog/2012/09/20/otcopress-githubrepowidget/"/>
    <updated>2012-09-20T22:55:00+08:00</updated>
    <id>http://zodiac1111.github.com/blog/2012/09/20/otcopress-githubrepowidget</id>
    <content type="html"><![CDATA[<script src="http://zodiac1111.github.com/javascripts/libs/jquery.min.js"></script>


<script type="text/javascript" src="http://zodiac1111.github.com/javascripts/libs/jquery.githubRepoWidget.min.js"></script>


<p>使用githubRepoWidget在otcopress上展示项目的方法.</p>

<h1>先看效果:</h1>

<p>例子1 Linux kernel:</p>

<div class="github-widget" data-repo="torvalds/linux"></div>


<p>例子2 githubRepoWidget:</p>

<div class="github-widget" data-repo="JoelSutherland/GitHub-jQuery-Repo-Widget"></div>


<!-- more -->


<h1>介绍:</h1>

<p>项目地址在github上: <a href="https://github.com/JoelSutherland/GitHub-jQuery-Repo-Widget">https://github.com/JoelSutherland/GitHub-jQuery-Repo-Widget</a></p>

<h3>配置:</h3>

<p>复制下载的<code>jquery.githubRepoWidget.min.js</code>到本地博客目录<code>octopress/source/javascripts/libs</code>下</p>

<h3>启用:</h3>

<p>方式1:局部</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.7/jquery.min.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;/javascripts/libs/jquery.githubRepoWidget.min.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;github-widget&quot;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">repo</span><span class="o">=</span><span class="s2">&quot;JoelSutherland/GitHub-jQuery-Repo-Widget&quot;</span><span class="o">&gt;&lt;</span><span class="err">/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>优点:仅在使用widget的页面才加载jquery.min.js等文件.减少不必要的耦合.</li>
<li>缺点:引用时需要添加较多(三行)的代码.</li>
</ul>


<p>方式2:全局</p>

<p>在<code>octopress/source/_includes/custom/head.html</code>或其他全局页面文件增加:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.7/jquery.min.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;/javascripts/libs/jquery.githubRepoWidget.min.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在需要展示项目时,这样添加:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;github-widget&quot;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">repo</span><span class="o">=</span><span class="s2">&quot;JoelSutherland/GitHub-jQuery-Repo-Widget&quot;</span><span class="o">&gt;&lt;</span><span class="err">/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>data-repo</code>项填写项目名称即可,如上例的<code>JoelSutherland/GitHub-jQuery-Repo-Widget</code>.</p>

<ul>
<li>优点:引用方便,仅需一行代码.</li>
<li>缺点:在不需要显示widget的页面也会加载jquery.min.js等文件,浪费网络资源.<br/>
修改otcopress项目的文件,可能会存在问题.

<h3>其他:</h3>

<p>暂无.</p></li>
</ul>


<h1>资料:</h1>

<ol>
<li>项目github:<a href="https://github.com/JoelSutherland/GitHub-jQuery-Repo-Widget">https://github.com/JoelSutherland/GitHub-jQuery-Repo-Widget</a></li>
<li>OSCHINA 增加软件与 Github 的集成:<a href="http://www.oschina.net/news/30679/oschina-projects-integration-with-github">http://www.oschina.net/news/30679/oschina-projects-integration-with-github</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在线分析转换标准 float 型数据]]></title>
    <link href="http://zodiac1111.github.com/blog/2012/09/20/online-ieee-754-analysis-binary-decimal-converter/"/>
    <updated>2012-09-20T19:54:00+08:00</updated>
    <id>http://zodiac1111.github.com/blog/2012/09/20/online-ieee-754-analysis-binary-decimal-converter</id>
    <content type="html"><![CDATA[<p>计算机中float型数据以IEEE-754标准存储,例如<code>1234.5678</code>存储为<code>0x449A522B</code>(32位).</p>

<p>使用二进制表示即:</p>

<pre><code>01000100 10011010 01010010 00101011
</code></pre>

<p>根据IEEE754 Single precision 32-bit标准的定义:</p>

<p><img src="http://zodiac1111.github.com/downloads/img/IEEE-754-float.png">
通用公式: <code>实际数值 = sign * 2^exponent * mantissa</code></p>

<p>一些特殊的值,如正无穷等,参见维基百科.</p>

<p>更多的分析和在线转换参见参考资料.</p>

<h2>参考资料</h2>

<ol>
<li>维基百科:<a href="https://zh.wikipedia.org/zh/IEEE_754">https://zh.wikipedia.org/zh/IEEE_754</a></li>
<li>在线分析:<a href="http://babbage.cs.qc.cuny.edu/IEEE-754/">http://babbage.cs.qc.cuny.edu/IEEE-754/</a></li>
<li>在线转换:<a href="http://www.binaryconvert.com/">http://www.binaryconvert.com/</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[chromium 预览 pdf 文件]]></title>
    <link href="http://zodiac1111.github.com/blog/2012/09/20/chromium-pdf-viewer/"/>
    <updated>2012-09-20T19:46:00+08:00</updated>
    <id>http://zodiac1111.github.com/blog/2012/09/20/chromium-pdf-viewer</id>
    <content type="html"><![CDATA[<p>chrome使用libpdf.so库,这个库不是自由软件,所以chromium默认没有带.
chrome默认自带的库默认路径为:<code>/opt/google/chrome/libpdf.so</code></p>

<h2>复制chrome的pdf库</h2>

<p>复制 <code>/opt/google/chrome/libpdf.so</code>到chrome-linux(chromium)下</p>

<p>或许需要在浏览器中键入<code>chrome://plugins/</code>,使能Chrome PDF Viewer插件.</p>

<h1>参考资料</h1>

<ol>
<li>简单的解决方式:<a href="http://askubuntu.com/questions/12584/why-doesnt-chromium-have-chrome-pdf-viewer-plugin">http://askubuntu.com/questions/12584/why-doesnt-chromium-have-chrome-pdf-viewer-plugin</a></li>
<li>chromium issues:<a href="https://code.google.com/p/chromium/issues/detail?id=50852#c16">https://code.google.com/p/chromium/issues/detail?id=50852#c16</a></li>
<li>libpdf.so</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rake 自动补全 task]]></title>
    <link href="http://zodiac1111.github.com/blog/2012/09/19/rake-completion-in-bash/"/>
    <updated>2012-09-19T21:07:00+08:00</updated>
    <id>http://zodiac1111.github.com/blog/2012/09/19/rake-completion-in-bash</id>
    <content type="html"><![CDATA[<p>在使用octopress写文章时有些命令记不太全,如<code> new_post["title"]</code>,<code>rake generate</code>,<code>rake preview</code>,<code>rake deploy</code>,<code>rake gen_deploy</code>.</p>

<p>那么想到既然bash中make可以自动补全目标(target),那么rake应该也可以有这样的功能吧.<br/>
于是在git找到了 rake-completion 这个项目:</p>

<script src="http://zodiac1111.github.com/javascripts/libs/jquery.min.js"></script>


<div class="github-widget" data-repo="ai/rake-completion"></div>


<p>网址:<a href="https://github.com/ai/rake-completion">https://github.com/ai/rake-completion</a></p>

<h2>安装</h2>

<p>安装也很简单,如<code>README</code>文件中<code>other unix-like</code>一节指示:</p>

<p>复制<code>rake</code>文件到<code>/etc/bash_completion.d/</code>目录下(需要root权限):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>su -c 'cp ./rake /etc/bash_completion.d/'</span></code></pre></td></tr></table></div></figure>


<h2>使用</h2>

<p>需要补全的时候按<code>Tab</code>键就好啦~,效果如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[user1@localhost octopress]$ rake &lt;Tab>
</span><span class='line'>clean                     isolate[filename]         set_root_dir[dir]
</span><span class='line'>copydot[source,dest]      list                      setup_github_pages[repo]
</span><span class='line'>deploy                    new_page[filename]        update_source[theme]
</span><span class='line'>gen_deploy                new_post[title]           update_style[theme]
</span><span class='line'>generate                  preview                   watch
</span><span class='line'>install[theme]            push
</span><span class='line'>integrate                 rsync</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux/Fedora 17下安装配置NFS服务]]></title>
    <link href="http://zodiac1111.github.com/blog/2012/09/17/linux-fedora-17-install-nfs-server/"/>
    <updated>2012-09-17T21:23:00+08:00</updated>
    <id>http://zodiac1111.github.com/blog/2012/09/17/linux-fedora-17-install-nfs-server</id>
    <content type="html"><![CDATA[<h1>NFS服务器安装和配置</h1>

<p>OS:fedora17.i686 &amp; fedora17.x86_64 &amp; f17beta.i686 &amp; f17beta.x86-64 <br/>
现在已经改成不用 imapXXXX的了
改成 守护进程rpc.nfsd
安装守护进程程序:</p>

<ol>
<li>搜索:<code>yum search nfs</code></li>
<li>得到:<code>nfs-utils.i686 : NFS utilities and supporting clients and daemons for the kernel NFS server</code><br/>
 看描述就是这货了.</li>
<li>安装:<code>yum install nfs-utils</code></li>
<li>使用:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rpc.nfsd [数量]        #设置最大线程
</span><span class='line'>man 8 rpc.nfsd        #查看 帮助</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<h2>配置可用NFS服务器的目录</h2>

<p>使用您喜欢的文本编辑器编辑<code>/etc/exports</code>文件
例如:<code>vi /etc/exports</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/mnt         127.0.0.1(ro,sync)
</span><span class='line'>共享目录          主机名   (权限)</span></code></pre></td></tr></table></div></figure>


<p>其中:</p>

<ul>
<li>共享目录  服务器共享的目录</li>
<li>主机名 指示能够访问这个共享目录的主机</li>
<li>权限    指示主机访问该共享目录的权限

<ol>
<li>ro=readonly只读 rw=读写</li>
<li>sync是设置NFS服务器同步写磁盘，不会导致数据的丢失

<h2>关闭防火墙(如果你和我一样不太了解如何配置防火墙的话)</h2></li>
</ol>
</li>
</ul>


<h2>启用新的配置</h2>

<p><code>exportfs</code> 指令主要的三个作用：<br/>
1. <code>exportfs -rv</code>   重新读取共享配置文件，马上生效 <br/>
2. <code>exportfs -auv</code>  马上停止所有本机上的NFS共享，并不改变 /etc/exports 文件的内容，只是当前停止共享<br/>
3. <code>exportfs -av</code>   显示所有当前机器上的NFS共享目录信息</p>

<h2>测试</h2>

<h3>启用挂载</h3>

<p>启动服务:</p>

<p><code>systemctl restart nfs-server.service</code></p>

<p>In older versions of Fedora (for instance Fedora 14),</p>

<p><code>su -c 'service nfs restart'</code></p>

<p>或?且</p>

<pre><code>rpc.mountd  
</code></pre>

<p>否则在下一步挂载可能出现:<br/>
mount.nfs: access denied by server while mounting 127.0.0.1:/home<br/>
或者在输入&#8221;mount -t nfs 127.0.0.1:&#8221;后按Tab键补全<br/>
:rpc mount export: RPC: Unable to receive; errno = Connection refused</p>

<h3>挂载</h3>

<p></del>貌似只能挂载 /home 这样的一级目录 像/home/tom 这样的目录就不行??</del><br/>
像/home/tom/doc/nfsroot 这样的目录必须保证这条路径<strong>所有文件夹</strong>都是有相应的权限的.<br/>
<code>chmod -R</code>或许会用得着 <br/>
即/home 得有(读写)权限 /home/tom 也一样 /home/tom/doc 也一样. 仅仅nfsroot文件夹有读写权限是不行的. <br/>
在挂在时还是会提示没有访问权限&#8230;..</p>

<pre><code>mount -t nfs 127.0.0.1:/home    /mnt
挂载 -t 类型 把远端/home    (挂在)   到/mnt
#将127.0.0.1:/home 挂载到本机的/mnt目录下
</code></pre>

<h3>卸载</h3>

<pre><code>unomt /mnt
</code></pre>

<h1>参考</h1>

<p>=====<br/>
1. <a href="http://fedoraproject.org/wiki/Administration_Guide_Draft/NFS">Fedora官方帮助文档</a><br/>
2. 查看错误日志<code>cat /var/log/messages | grep mount</code> 来自<a href="http://liuzhigong.blog.163.com/blog/static/17827237520115305226932/">这里</a><br/>
3. 图形化的配置工具 <code>yum install system-config-nfs.noarch</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux/Fedora 17 安装man手册]]></title>
    <link href="http://zodiac1111.github.com/blog/2012/09/17/linux-fedora-17-install-man/"/>
    <updated>2012-09-17T21:18:00+08:00</updated>
    <id>http://zodiac1111.github.com/blog/2012/09/17/linux-fedora-17-install-man</id>
    <content type="html"><![CDATA[<pre><code>yum install man-pages
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 octopress 一些错误和解决方式]]></title>
    <link href="http://zodiac1111.github.com/blog/2012/09/15/some-octopress-oops/"/>
    <updated>2012-09-15T19:21:00+08:00</updated>
    <id>http://zodiac1111.github.com/blog/2012/09/15/some-octopress-oops</id>
    <content type="html"><![CDATA[<h1>生成错误</h1>

<p>错误现象类似这样:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/home/use1/.gem/ruby/1.9.1/gems/maruku-0.6.0/lib/maruku/input/parse_doc.rb:22:in `&lt;top (required)>': iconv will be deprecated in the future, use String#encode instead.
</span><span class='line'>Configuration from /home/use1/blog/octopress/_config.yml
</span><span class='line'>Building site: source -> public
</span><span class='line'>/usr/share/ruby/psych.rb:203:in `parse': (&lt;unknown>): found unexpected end of stream while scanning a quoted scalar at line 3 column 8 (Psych::SyntaxError)
</span><span class='line'>  from /usr/share/ruby/psych.rb:203:in `parse_stream'
</span><span class='line'>  from /usr/share/ruby/psych.rb:151:in `parse'
</span><span class='line'>  from /usr/share/ruby/psych.rb:127:in `load'
</span><span class='line'>  from /home/use1/.gem/ruby/1.9.1/gems/jekyll-0.11.2/lib/jekyll/convertible.rb:33:in `read_yaml'
</span><span class='line'>  from /home/use1/.gem/ruby/1.9.1/gems/jekyll-0.11.2/lib/jekyll/post.rb:39:in `initialize'
</span><span class='line'>  from /home/use1/blog/octopress/plugins/preview_unpublished.rb:23:in `new'
</span><span class='line'>  from /home/use1/blog/octopress/plugins/preview_unpublished.rb:23:in `block in read_posts'
</span><span class='line'>  from /home/use1/blog/octopress/plugins/preview_unpublished.rb:21:in `each'
</span><span class='line'>  from /home/use1/blog/octopress/plugins/preview_unpublished.rb:21:in `read_posts'
</span><span class='line'>  from /home/use1/.gem/ruby/1.9.1/gems/jekyll-0.11.2/lib/jekyll/site.rb:128:in `read_directories'
</span><span class='line'>  from /home/use1/.gem/ruby/1.9.1/gems/jekyll-0.11.2/lib/jekyll/site.rb:98:in `read'
</span><span class='line'>  from /home/use1/.gem/ruby/1.9.1/gems/jekyll-0.11.2/lib/jekyll/site.rb:38:in `process'
</span><span class='line'>  from /home/use1/.gem/ruby/1.9.1/gems/jekyll-0.11.2/bin/jekyll:250:in `&lt;top (required)>'
</span><span class='line'>  from /home/use1/bin/jekyll:23:in `load'
</span><span class='line'>  from /home/use1/bin/jekyll:23:in `&lt;main>'</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>造成以上错误的原因很多,多数是修改博客文章属性(如果不是修改博客框架代码的话)失误造成的,下面就是的错误的范例:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>layout: post
</span><span class='line'>title: "my title
</span><span class='line'>date: 2012-09-15 19:21
</span><span class='line'>comments: true
</span><span class='line'>categories:[tag1],[tag2]
</span><span class='line'>---</span></code></pre></td></tr></table></div></figure>


<ol>
<li>title 一栏的值应为 <code>"my title"</code> ,少了个引号</li>
<li>categories 一栏的写法应该为 <code>[tag1,tag2]</code> .</li>
<li>categories一栏的冒号后面应该空一格,像这样: <code>categories: [tag1,tag2]</code></li>
</ol>


<p>是需要眼睛足够&#8221;雪亮&#8221;啊.</p>

<h3>参考</h3>

<ol>
<li><a href="http://blog.micronarrativ.org/blog/2012/09/07/wordpress-til-octopress">blog.micronarrativ.org</a></li>
<li><a href="http://www.cnblogs.com/heart-runner/archive/2012/02/14/2351136.html">cnblogs.com</a></li>
</ol>


<h1>关于Codeblock代码高亮</h1>

<p>现象:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/home/use1/.gem/ruby/1.9.1/gems/ffi-1.0.11/lib/ffi/library.rb:121:in `block in ffi_lib': Could not open library 'lib.so': lib.so: cannot open shared object file: No such file or directory (LoadError)
</span><span class='line'>........</span></code></pre></td></tr></table></div></figure>


<p>看说明貌似是某个库没有.因为这种代码高亮是在本地将语法通过一些程序直接生成再上传到网上的,而高亮程序需要这个库.在fedora上直接<code>yum install python-devel</code>安装这个软件包即可解决.</p>

<h3>参考:</h3>

<ol>
<li><a href="https://github.com/tmm1/pygments.rb/issues/10">github.com/tmm1/pygments.rb/issues</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简单的 modbus/tcp 实现]]></title>
    <link href="http://zodiac1111.github.com/blog/2012/09/15/a-simple-modbus-tcp-instance/"/>
    <updated>2012-09-15T00:15:00+08:00</updated>
    <id>http://zodiac1111.github.com/blog/2012/09/15/a-simple-modbus-tcp-instance</id>
    <content type="html"><![CDATA[<h1>测试工具: modpoll(主站) diagslave(从站)</h1>

<h2>简介</h2>

<p>支持平台:</p>

<ol>
<li>Windows</li>
<li>Linux (x86 32-bit) &lt;-本文实验平台</li>
<li>Solaris (SPARC)</li>
<li>QNX Neutrino 6 (x86)</li>
</ol>


<p>本文使用这两个软件进行Linux 32位平台下的Modbus/TCP程序调试.</p>

<h3>1. 模拟主站(Linux):</h3>

<pre><code>./modpoll -m tcp -a 2 -t4:hex -r 10 -c 3  127.0.0.1 -1 -p 10001
</code></pre>

<p>各个选项意义如下:</p>

<ol>
<li>-m &lt;模式名>    : -m tcp即MODBUS/TCP protocol模式</li>
<li>-a &lt;从站编号>  : Slave address (1-255, 默认 1 )</li>
<li>-t 4:hex      : 16-bit output (holding) register data type with hex display;另有其他多种参见<strong>参考</strong></li>
<li>-r #          : Start reference (1-65536, 100 is default)</li>
<li>-c #          : Number of values to poll (1-100, 1 is default)</li>
<li>127.0.0.1     : IP地址(tcp模式)</li>
<li>-1            : (数字1)发送一次,没有这个选项则连续发送</li>
<li>-p &lt;端口号>    : tcp模式下指定端口号,默认 502</li>
</ol>


<h3>2. 模拟从站(Linux):</h3>

<pre><code>./diagslave -m tcp -p 10001
</code></pre>

<p>选项意义:</p>

<ol>
<li>-m tcp :tcp模式</li>
<li>-p 10001 : 监听端口</li>
</ol>


<!-- more -->


<h2>例子</h2>

<p>打开连个终端分别运行:</p>

<pre><code>#从站
./diagslave -m tcp -p 10001
</code></pre>

<p>和</p>

<pre><code>#主站
./modpoll -m tcp -a 2 -t4:hex -r 10 -c 3  127.0.0.1 -1 -p 10001
</code></pre>

<p>则,在从站可以看到如下显示:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>diagslave 2.12 - FieldTalk(tm) Modbus(R) Diagnostic Slave Simulator
</span><span class='line'>Copyright (c) 2002-2012 proconX Pty Ltd
</span><span class='line'>Visit http://www.modbusdriver.com for Modbus libraries and tools.
</span><span class='line'>
</span><span class='line'>Protocol configuration: MODBUS/TCP
</span><span class='line'>Slave configuration: address = -1, master activity t/o = 3.00
</span><span class='line'>TCP configuration: port = 10001, connection t/o = 60.00
</span><span class='line'>
</span><span class='line'>Server started up successfully.
</span><span class='line'>Listening to network (Ctrl-C to stop)
</span><span class='line'>
</span><span class='line'>validateMasterIpAddr: accepting connection from 127.0.0.1 ->显示从127.0.0.1链接到从站
</span><span class='line'>Slave   2: readHoldingRegisters from 10, 3 references  ->显示读取功能 和 从10读取3个寄存器
</span><span class='line'>...................</span></code></pre></td></tr></table></div></figure>


<p>同时主站如下显示:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>modpoll 3.1 - FieldTalk(tm) Modbus(R) Master Simulator
</span><span class='line'>Copyright (c) 2002-2011 proconX Pty Ltd
</span><span class='line'>Visit http://www.modbusdriver.com for Modbus libraries and tools.
</span><span class='line'>
</span><span class='line'>Protocol configuration: MODBUS/TCP ->模式
</span><span class='line'>Slave configuration...: address = 2, start reference = 10, count = 3 ->从站地址,起始寄存器,寄存器数量
</span><span class='line'>Communication.........: 127.0.0.1, port 10001, t/o 1.00 s, poll rate 1000 ms ->ip 端口
</span><span class='line'>Data type.............: 16-bit register (hex), output (holding) register table ->数据类型
</span><span class='line'>
</span><span class='line'>-- Polling slave... 
</span><span class='line'>[10]: 0x0000 ->数据 (仅仅能用用来测试通路,没有实际意义)
</span><span class='line'>[11]: 0x0000
</span><span class='line'>[12]: 0x0000</span></code></pre></td></tr></table></div></figure>


<h2>参考:</h2>

<ol>
<li>模拟主站(master)软件以及官方说明(modpoll)<a href="http://www.modbusdriver.com/modpoll.html">http://www.modbusdriver.com/modpoll.html</a></li>
<li>模拟从站软件以及官方说明:(diagslave)<a href="http://www.modbusdriver.com/diagslave.html">http://www.modbusdriver.com/diagslave.html</a></li>
</ol>


<h1>libmodbus 开源modbus库</h1>

<h2>简介</h2>

<p>使用c语言编写的modbus库</p>

<ol>
<li>官网:<a href="http://libmodbus.org/">http://libmodbus.org/</a>(墙?)</li>
<li>代码托管:git <a href="https://github.com/stephane/libmodbus">https://github.com/stephane/libmodbus</a></li>
</ol>


<h1>参考资料:</h1>

<ol>
<li><a href="http://www.simplymodbus.ca/TCP.htm">http://www.simplymodbus.ca/TCP.htm</a></li>
<li>实现指导手册<a href="http://www.electroind.com/pdf/Modbus_messaging_on_TCPIP_implementation_guide_V11.pdf">Modbus_messaging_on_TCPIP_implementation_guide</a></li>
<li>协议<a href="http://www.modbus.org/docs/Modbus_Application_Protocol_V1_1b.pdf">Modbus_Application_Protocol_V1_1b.pdf</a>(官网,mbap)</li>
<li>实现指导手册<a href="http://www.modbus.org/docs/Modbus_Messaging_Implementation_Guide_V1_0b.pdf">Modbus_Messaging_Implementation_Guide_V1_0b.pdf</a>(官网,实现指导)</li>
<li>说明书<a href="http://www.modbus.org/specs.php">www.modbus.org/specs.php</a>(说明书)</li>
<li>从Modbus到透明就绪 华镕 编著 第8章 (中文)</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[crosstool在fedora17下的编译遇到的问题和解决方法]]></title>
    <link href="http://zodiac1111.github.com/blog/2012/08/27/fedora-17-corsstool/"/>
    <updated>2012-08-27T11:15:00+08:00</updated>
    <id>http://zodiac1111.github.com/blog/2012/08/27/fedora-17-corsstool</id>
    <content type="html"><![CDATA[<p>/<em>##crosstool在fedora 17下的编译一到的问题/解决</em>/</p>

<p>构建过程<a href="http://blog.chinaunix.net/space.php?uid=20543672&amp;do=blog&amp;id=94268">blog.chinaunix.net</a>,在这个过程中出现的问题,笔记如下:</p>

<h3>问题1:</h3>

<pre><code>gcc: error trying to exec ‘cc1obj’: execvp: No such file or directory
</code></pre>

<p>obj-c的库问题,参看
<a href="http://lok.me/a/1182.html">http://lok.me/a/1182.html</a></p>

<p>一句话解决方式</p>

<p><code>yum install gcc-objc gcc-objc++ libobjc</code></p>

<!-- more -->


<h3>问题2:</h3>

<pre><code>flat_bl.m:2:2: 错误：expected identifier or ‘(’ before ‘%’ token
</code></pre>

<p>解决来源:<a href="http://forums.fedoraforum.org/archive/index.php/t-267449.html">fedoraforum</a></p>

<p>Makefile 依赖*.m文件错误,删除.m文件,更改Makefile依赖关系</p>

<h3>问题3:</h3>

<pre><code>These critical programs are missing or too old: gcc
Check the INSTALL file for required versions.
</code></pre>

<p>解决方法:<a href="http://lidu678.blog.163.com/blog/static/898060062010498571444/">lidu678.blog.163.com</a></p>

<p>概括:<code>crosstool-0.43/patches/glibc-2.3.2/glibc-2.3.3-allow-gcc-4.0-configure.patch</code>
检查版本时gcc 4.7.0 过高, 在该文件中可以看出<code>4.[01]*</code>改为<code>|4.[017]*</code>使其通过检查</p>

<h3>问题4:</h3>

<pre><code>make[2]: 进入目录“/home/your name/test/crosstool-0.43/build/arm-9tdmi-linux-gnu/gcc-4.1.0-glibc-2.3.2/glibc-2.3.2/manual”
Makefile:250: *** 混和的隐含和普通规则。 停止。
</code></pre>

<p>原因:<br/>
fedora make程序特有有的对混和目标的规则(对老版本makefile文件的兼容性不好),如</p>

<pre><code>目标1 目标2:
(tab)命令
</code></pre>

<p>分解成为:</p>

<pre><code>目标1:
(tab)命令
目标2:
(tab)命令
</code></pre>

<p>即可.<br/>
参考 &#8220;fedora make 混和的隐含和普通规则&#8221;
<a href="http://blog.csdn.net/melong100/article/details/6238273">blog.csdn.net</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cpp运算符重载笔记]]></title>
    <link href="http://zodiac1111.github.com/blog/2012/08/22/cpp-class-overload/"/>
    <updated>2012-08-22T20:37:00+08:00</updated>
    <id>http://zodiac1111.github.com/blog/2012/08/22/cpp-class-overload</id>
    <content type="html"><![CDATA[<p>//# 运算符重载
函数重载 参数列表必须不同<br>
运算符重载,所有运算符都能.<br>
C++一种面向对象的语言/面向应用.(放大软件的规模)</p>

<p><strong>问题由来:例如两个类的相加,怎么实现?</strong></p>

<p>例:人民币类 元/角</p>

<pre><code>RMB m1,m2,m3;
m3=m1+m2;//两个对象相加
m3.display();
m3++;//单目运算.
</code></pre>

<!-- more -->


<hr />

<p>站在编译器角度,把&#8217;+&#8217;视为一个特殊的函数.类似lisp中(+ 1 2).即运算符是一类特殊的函数,所以可以<strong>函数的重载</strong><br>
声明中:</p>

<pre><code>RMB operator +(RMB&amp; ,RMB&amp; ); //双目运算基本返回给别的值,对象调用拷贝构造函数
RMB&amp; operator ++(RMB&amp; ) //单目运算结果返回本身
</code></pre>

<p>RMB:返回值<br>
operator + :特殊的函数名 <br>
(RMB&amp; ,RMB&amp;) :参数列表<br></p>

<p>一般定义为类的成员函数,即例如加法一定是<strong>当前对象</strong>本身 加上另外一个对象.</p>

<pre><code>RMB RMB::operator + (RMB&amp; s) //双目加法 一个参数是对象本身.
RMB RMB::operator ++() //自加 
</code></pre>

<p>注意:运算符结合性.</p>

<p>单目运算结合性? ++() ++(int)?</p>

<p>赋值 =重载:</p>

<pre><code>//代码
name &amp; operator = (name &amp;s)
{
    //在返回前做自己需要的操作,即重载=.
    delname();
    copyname();
    //返回
return *this;
}
</code></pre>

<hr />

<p><strong>重载操作符必须具有一个类类型操作数</strong>
除了函数调用操作符之外，重载操作符的形参数目（包括成员函数的隐式 this 指针）与操作符的操作数数目相同。函数调用操作符可以接受任意数目的操作数。
1.  可重载的操作符(42个)</p>

<pre><code>+ - * / % ^ &amp; | ~ ! , = &lt; &gt; &lt;= &gt;= ++ --
&lt;&lt; &gt;&gt; == != &amp;&amp; || += -= /= %= ^= &amp;= |= 
*= &lt;&lt;= &gt;&gt;= [] () -&gt; -&gt;* new new [] delete delete [] 
</code></pre>

<ol>
<li><p>不能重载(4个)</p>

<p> ::    .*   .    ?:
通过连接其他合法符号可以创建新的操作符。例如，定义一个 operator** 以提供求幂运算是合法的。</p></li>
</ol>


<h3>优先级和结合性是固定的</h3>

<h3>不再具备短路求值特性</h3>

<h3>不要重载具有内置含义的操作符</h3>

<p> 重载逗号、取地址、逻辑与、逻辑或等等操作符通常不是好做法。这些操作符具有有用的内置含义，如果我们定义了自己的版本，就不能再使用这些内置含义。</p>

<h4>选择成员或非成员实现</h4>

<p>为类设计重载操作符的时候，必须选择是将操作符设置为类成员还是普通非成员函数。在某些情况下，程序员没有选择，操作符必须是成员；在另一些情况下，有些经验原则可指导我们做出决定。下面是一些指导原则，有助于决定将操作符设置为类成员还是普通非成员函数：</p>

<ul>
<li>赋值（=）、下标（[]）、调用（()）和成员访问箭头（->）等操作符必须定义为成员，将这些操作符定义为非成员函数将在编译时标记为错误。</li>
<li>像赋值一样，复合赋值操作符通常应定义为类的成员，与赋值不同的是，不一定非得这样做，如果定义非成员复合赋值操作符，不会出现编译错误。</li>
<li>改变对象状态或与给定类型紧密联系的其他一些操作符，如自增、自减和解引用，通常就定义为类成员。</li>
<li>对称的操作符，如算术操作符、相等操作符、关系操作符和位操作符，最好定义为普通非成员函数。</li>
<li>作为类成员的重载函数，其形参看起来比操作数数目少 1。作为成员函数的操作符有一个隐含的 this 形参，限定为第一个操作数。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rtp传输协议头浅析]]></title>
    <link href="http://zodiac1111.github.com/blog/2012/08/22/rtpheader/"/>
    <updated>2012-08-22T20:35:00+08:00</updated>
    <id>http://zodiac1111.github.com/blog/2012/08/22/rtpheader</id>
    <content type="html"><![CDATA[<p>//#rtp头浅析
参考:   <br/>
1. <a href="http://hi.baidu.com/studyarea/item/898d995845b610cfd3e10c32">hi.baidu.com</a>
2. <a href="http://topic.csdn.net/u/20071219/12/9ee213e7-aff6-4c81-b3d9-21d6438904b1.html">topic.csdn.net</a>
下面是一个例子</p>

<p>RFC文档为RFC3550（RFC1889为其过期版本）
base+0(暂略)此处省略0x33字节
UDP数据区(base+0x33):
RTP header:(头数据)位于udp包的base+0x33地址(内容)
80 e0 69 37 3c 2e 6b 4e 6c 77 83 bf (大尾端[大端])网络字节序</p>

<!-- more -->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>详解(地址都+0x33)
</span><span class='line'>地址    值 意义(不明...
</span><span class='line'>0Byte     80  [1 Byte] 
</span><span class='line'>  `10b        2bit 版本号:RFC1889 Version 2[过期版本!我去~]
</span><span class='line'>  `0b     1bit 填充(Padding)? 否
</span><span class='line'>  `0b     1bit 扩展? 否
</span><span class='line'>  `0000b      4bit 特约来源识别码数：0
</span><span class='line'>1 e0  [1 Byte]
</span><span class='line'>  `1b     1bit 1重要事件,通常表示一帧结束.MARK
</span><span class='line'>  `110-0000b  7bit 负载类型(Payload type):DynamicRTP-Type-96 (96)
</span><span class='line'>2 69  [2 Byte]序列号(Sequence):
</span><span class='line'>3 37      0x6937=26935(十进制) 
</span><span class='line'>4 3c  [4 Byte]时间戳
</span><span class='line'>5 2e      0x3c2e6b4e=1009675086
</span><span class='line'>6 6b      ^^
</span><span class='line'>7 4e      ^^
</span><span class='line'>8 6c  [4 Byte]同步源标识符(SSRC)
</span><span class='line'>9 77      Synchronization Source identifier: 
</span><span class='line'>10    83      0x6c7783bf (1819771839)
</span><span class='line'>11    bf      ^^
</span><span class='line'>12~?? ??  [&gt;=0 Byte]可选的数据</span></code></pre></td></tr></table></div></figure>


<p>时间戳 差值=3750 = 900000(视频)/24(帧间隔)
一帧最大MUT? 1500Byte =14(EthernetII)+20(ip头) +8UDP+12(RTP头)+1442(RTP数据体)??
参见RFC 3984 p.13:NAL Unit Octet Usage 1字节
例如:01011100 =0x5a
0禁止位-不禁止
10优先级:2   Coded slice data partition A    00最低 11最高</p>

<pre><code>     Type   Packet    Single NAL    Non-Interleaved    Interleaved
                           Unit Mode           Mode             Mode  
</code></pre>

<p>11100  28     FU-A          no              yes              yes
FU-a格式:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   0                   1                   2                   3
</span><span class='line'>   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
</span><span class='line'>  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</span><span class='line'>  | FU indicator  |   FU header   |                               |
</span><span class='line'>  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
</span><span class='line'>  |                                                               |
</span><span class='line'>  |                         FU payload                            |
</span><span class='line'>  |                                                               |
</span><span class='line'>  |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</span><span class='line'>  |                               :...OPTIONAL RTP padding        |
</span><span class='line'>  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</span><span class='line'>
</span><span class='line'>  Figure 14.  RTP payload format for FU-A</span></code></pre></td></tr></table></div></figure>


<p>FU indicator : 1Byte</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  +---------------+
</span><span class='line'>  |0|1|2|3|4|5|6|7|
</span><span class='line'>  +-+-+-+-+-+-+-+-+
</span><span class='line'>  |F|NRI|  Type   |
</span><span class='line'>  +---------------+</span></code></pre></td></tr></table></div></figure>


<p>FU则与RTP定义头一样
FU header :1Byte</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  +---------------+
</span><span class='line'>  |0|1|2|3|4|5|6|7|
</span><span class='line'>  +-+-+-+-+-+-+-+-+
</span><span class='line'>  |S|E|R|  Type   |
</span><span class='line'>  +---------------+</span></code></pre></td></tr></table></div></figure>


<p>S=start E=end  of a fragmented NAL unit
   R: 1 bit</p>

<pre><code>  The Reserved bit MUST be equal to 0 and MUST be ignored by the
  receiver.
</code></pre>

<p>81=1<code>0</code>0`0-0001
这是一个帧的开始的NALU 单元</p>

<p>Type: 5 bits
   NAL单元荷载类型定义见下表</p>

<p>表1.  单元类型以及荷载结构总结</p>

<pre><code>  Type   Packet      Type name                       
  ---------------------------------------------------------
  0      undefined                                    -
  1-23   NAL unit    Single NAL unit packet per H.264  
  24     STAP-A     Single-time aggregation packet    
  25     STAP-B     Single-time aggregation packet    
  26     MTAP16    Multi-time aggregation packet     
  27     MTAP24    Multi-time aggregation packet     
  28     FU-A      Fragmentation unit                
  29     FU-B      Fragmentation unit                 
  30-31  undefined    
</code></pre>

<p>0-0001 即单个</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[softwave]]></title>
    <link href="http://zodiac1111.github.com/blog/2012/08/22/softwave/"/>
    <updated>2012-08-22T20:34:00+08:00</updated>
    <id>http://zodiac1111.github.com/blog/2012/08/22/softwave</id>
    <content type="html"><![CDATA[<h1>好用的软件</h1>

<h2>互联网</h2>

<p>chromium    web浏览器
elinks  A text-mode Web browser
w3m  A pager with Web browsing abilities</p>

<!-- more -->


<h2>开发</h2>

<p>indent  代码格式化
git 版本控制
valgrind    代码动态分析工具;c语言内存泄露/数组越界检测
splint  代码静态分析工具;检查源代码潜在错误.</p>

<h2>系统工具</h2>

<p>system-config-services  图形化服务管理程序
system-config-firewall  图形化防火墙规则管理
system-config-nfs   nfs服务器配置
miredo-client   ipv6代理客户端 Teredo IPv6 tunneling client</p>

<h2>未定义分类</h2>

<p>octave  类似matlab GNU
scilab  类似matlab
vlc 视频播放器,流媒体服务器/客户端
mplayer 视频播放器
guake   gnome终端(不支持文件夹拖拽复制
sun-pinyin  输入法
gimp    图形处理/查看
goldendict  字典/词典/翻译
retext  markdown语法所见即所得编辑器
octopress   轻量级静态blog
gbrainy 逻辑/心算/速记 游戏
xchat   irc客户端</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[other]]></title>
    <link href="http://zodiac1111.github.com/blog/2012/08/22/other/"/>
    <updated>2012-08-22T20:33:00+08:00</updated>
    <id>http://zodiac1111.github.com/blog/2012/08/22/other</id>
    <content type="html"><![CDATA[<h1>使用valgrind测试程序的内存泄露/多线程竞争/等等</h1>

<p>http://www.ibm.com/developerworks/cn/linux/l-cn-valgrind/</p>

<h1>在执行 Valgrind 期间连接 gdb</h1>

<blockquote><p>http://www.ibm.com/developerworks/cn/aix/library/au-aixnirvana/index.html</p></blockquote>

<p>algrind 和 gdb 可以结合使用。通过在 Valgrind 中使用 -db-attach=yes 选项，可以在运行 Valgrind 时直接调用 gdb。例如，如果带 –db-attach 选项对清单 12 中的代码调用 Valgrind，在首次遇到内存问题时，它会调用 gdb，见清单 13。
valgrind &#8211;tool=memcheck &#8211;leak-check=full  &#8211;db-attach=yes ./test
ps:&#8211;db-command=<command> 选项可以指定调试器</p>

<!-- more -->


<h1>加快编译</h1>

<blockquote><p>http://www.ibm.com/developerworks/cn/aix/library/au-aixnirvana/index.html</p></blockquote>

<p>对于任何比较复杂的软件，编译源代码都会占用不少时间。在加快编译过程方面，最好的工具之一是 ccache（见 参考资料 中的链接）。ccache 是一种编译器缓存，这意味着如果在编译期间文件没有修改过，就从工具的缓存获取它。如果用户只修改了一个头文件并调用 make clean; make，ccache 会显著加快编译。因为 ccache 不仅仅使用时间戳决定文件是否需要重新编译，可以更好地节省宝贵的编译时间。下面是使用 ccache 的一个示例：</p>

<h1>尾递归</h1>

<p>`
// 尾递归求阶乘
unsigned int RefactorialTail(unsigned int i,const unsigned int status)
{</p>

<pre><code>if(i == 0)
    return status;
return RefactorialTail(i-1, status*i);
</code></pre>

<p>}</p>

<p>call :RefactorialTail(xs,1);</p>

<p><code>
</code>
// 尾递归求菲波纳锲数列
unsigned int FeboTail(unsigned int i,  //输入</p>

<pre><code>                  const unsigned int s1,     //上上次结果
                  const unsigned int s2)    //上次结果
</code></pre>

<p>{</p>

<pre><code>if(i == 0)
    return s1;
return FeboTail(i-1, s2, s1+s2);
</code></pre>

<p>}
call: FeboTail(x,1,1) //数组第0项开始
call: FeboTail(x,1,1) //数组第1项开始
`</p>

<h1>*sh: ./hello3: No such file or directory</h1>

<blockquote><p>http://www.newsmth.net/nForum/#!article/Embedded/104992
ldd 查看库版本,然后检查是否存在该库</p></blockquote>

<h1>echo -e &#8220;1\n2&#8221;</h1>

<h1>Fedora 时间</h1>

<p>TODO: Linux下各种时间的同异</p>

<blockquote><p>http://www.linuxdiyf.com/bbs/thread-204628-1-1.html</p></blockquote>

<p>重新安装了系统，Fedora15.
在我安装好系统后，系统的时间是错误的，而且无法修改，每次启动Fedora后都会把主板上BIOS时间修改了，我开机的时候修改BIOS的时间再进系统，问题依然存在。经过我的查阅资料，问题解决了。
首先我查阅 《鸟哥的Linux私房菜》知道有一个文件<code>/etc/sysconfig/clock</code>可以设置时间。
打开文件一看，原来仅仅是设置时区的。
`</p>

<h1>The time zone of the system is defined by the contents of /etc/localtime.</h1>

<h1>This file is only for evaluation by system-config-date, do not rely on its</h1>

<h1>contents elsewhere.</h1>

<p>ZONE=&#8221;Asia/Chongqing&#8221;
`</p>

<p>从上面的说明可以看到，有一个 /etc/localtime，我用vi打开这个文件，发现是乱码。我猜测可那就是这些乱码的原因了。
于是我把 /etc/localtime重命名，然后使用命令touch /etc/localtime重新建立了一个localtime空白文件。
mv /etc/localtime /etc/localtime-bak
touch /etc/localtime
复制代码
当我把空白文件建立好后，时间立即正确了。</p>

<p>正常情况下 /etc/localtime 也是二进制的（文本编辑器打开看是乱码~~）
更改后和标准时间相差8个小时。。。
应该是UTC那个勾，不要点上就好。不严格的说，UTC用的是格林威治时间，跟这边当然会差8小时了。</p>

<h1>关于fedora 17启动时显示cannot open font file true的解决办法</h1>

<p>打开/etc/default/grub 文件
将GRUB_CMDLINE_LINUX=行中的SYSFONT=True 改为SYSFONT=latarcyrheb-sun16 ；
保存退出；
运行命令：
grub2-mkconfig -o /boot/grub2/grub.cfg
然后reboot；
问题即可解决。</p>

<p>本办法是搜索来的，原文http://forums.fedoraforum.org/showthread.php?t=277213，感谢原作者！</p>

<h1>中文编码转换 iconv utf8 &lt;=> big/gb2312</h1>

<blockquote><p>鸟哥的私房书</p></blockquote>

<p>`
[root@www ~]# iconv &#8211;list
[root@www ~]# iconv -f 原本编码 -t 新编码 filename [-o newfile]
选项不参数:
&#8211;list :列出 iconv 支持持的语系数据
-f :from ,亦即来源之意,后接原本的编码格式;
-t :to ,亦即后来的新编码要是什么格式;
-o file:如果要保留原本的档案,那么使用 -o 新档名,可以建立新编码档案。
范例一:将 /tmp/vitest/vi.big5 转成 utf8 编码吧!
[root@www ~]# cd /tmp/vitest
[root@www vitest]# iconv -f big5 -t utf8 vi.big5 -o vi.utf8
[root@www vitest]# file vi*
vi.big5: ISO-8859 text, with CRLF line terminators
vi.utf8: UTF-8 Unicode text, with CRLF line terminators</p>

<h1>是吧!有明显不同吧! ^_^</h1>

<p>这指令支持的语系非常之多,除了正体中文的 big5, utf8 编码之外,也支持简体中文的 gb2312 , 所
以对岸的朊友可以简单的将鸟站的网页数据下载后,利用这个指令来转成简体,就能够轻松的读取文件
数据啰! 不过,不要将转成简体的档案又上传成为您自己的网页啊!这明明是鸟哥写的不是吗? ^_^
不过如果是要将正体中文的 utf8 转成简体中文的 utf8 编码时,那就得费些功夫了! 丼例来说,如果
要将刚刚那个 vi.utf8 转成简体的 utf8 时,可以这样做:
[root@www vitest]# iconv -f utf8 -t big5 vi.utf8 |\</p>

<pre><code>    iconv -f big5 -t gb2312 | \
    iconv -f gb2312 -t utf8 -o vi.gb.utf8
</code></pre>

<p>1 繁(UTF8)->繁(big5)
2 繁(big5)->简(gb2312)
3 简(gb2312)->简(UTF8)
`</p>

<h1>dos2unix unix2dos window/Unix-like文本文件回车换行转换</h1>

<p>我们在第七章里面谈到 cat 这个指令时,曾经提到过 DOS 不 Linux 断行字符的不同。 而我们也可以利
用 cat -A 来观察以 DOS (Windows 系统) 建立的档案的特殊格式, 也可以取现在 DOS 使用的断行字
符为 ^M$ ,我们称为 CR 不 LF 两个符号。 而在 Linux 底下,则是仅有 LF ($) 这个断行符号。这个断
行符号对于 Linux 的影响很大喔! 为什么呢?
我们说过,在 Linux 底下的指令在开始执行时,他的判断依据是 『Enter』,而 Linux 的 Enter 为 LF
符号, 不过,由于 DOS 的断行符号是 CRLF ,也就是多了一个 ^M 的符号出来, 在这样的情况下,
如果是一个 shell script 的程序档案,呵呵~将可能造成『程序无法执行』的状态~ 因为他会误判程序
所下达的指令内容啊!这很伤脑筋吧!
那怂么办啊?很简单啊,将格式转换成为 Linux 即可啊!『废话』,这当然大家都知道,但是, 要以
vi 进入该档案,然后一个一个删除每一行的 CR 吗?当然没有这么没人性啦! 我们可以透过简单的指
令来进行格式的转换啊!</p>

<p>root@www ~]# dos2unix [-kn] file [newfile]
[root@www ~]# unix2dos [-kn] file [newfile]
选项不参数:
-k :保留该档案原本的 mtime 时间格式 (不更新档案上次内容经过修订的时间)
-n :保留原本的旧档,将转换后的内容输出到新档案,如: dos2unix -n old
new
范例一:将刚刚上述练习的 /tmp/vitest/man.config 修改成为 dos 断行
[root@www ~]# cd /tmp/vitest
[root@www vitest]# cp -a /etc/man.config .
[root@www vitest]# ll man.config
-rw-r&#8211;r&#8211; 1 root root 4617 Jan 6 2007 man.config
[root@www vitest]# unix2dos -k man.config
unix2dos: converting file man.config to DOS format &#8230;</p>

<h1>屏幕会显示上述的讯息,说明断行转为 DOS 格式了!</h1>

<p>[root@www vitest]# ll man.config
-rw-r&#8211;r&#8211; 1 root root 4758 Jan 6 2007 man.config</p>

<h1>断行字符多了 ^M ,所以容量增加了!</h1>

<p>范例二:将上述的 man.config 转成 man.config.linux 的 Linux 断行字符
[root@www vitest]# dos2unix -k -n man.config man.config.linux
dos2unix: converting file man.config to file man.config.linux in UNIX
format &#8230;
[root@www vitest]# ll man.config*
-rw-r&#8211;r&#8211; 1 root root 4758 Jan 6 2007 man.config
-rw&#8212;&#8212;- 1 root root 4617 Jan 6 2007 man.config.linux
因为断行字符以及 DOS 不 Linux 操作系统底下一些字符的定义不同,因此, 不建议你在 Windows 系
统当中将档案编辑好之后,才上传到 Linux 系统,会容易取生错误问题。 而且,如果你在不同的系统
之间复制一些纯文本档案时,千万记得要使用 unix2dos 戒 dos2unix 来转换一下断行格式啊!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用aircrack-ng进行无线网络嗅探和破解]]></title>
    <link href="http://zodiac1111.github.com/blog/2012/08/22/aircrack-ng/"/>
    <updated>2012-08-22T20:30:00+08:00</updated>
    <id>http://zodiac1111.github.com/blog/2012/08/22/aircrack-ng</id>
    <content type="html"><![CDATA[<p><a href="http://netsecurity.51cto.com/art/201105/264844_3.htm">来源</a></p>

<p>当然，通过输入iwconfig查看也是可以滴。这个命令专用于查看无线网卡，不像ifconfig那样查看所有适配器。</p>

<p>iwconfig</p>

<p>在Linux下，我们使用Aircrack-ng套装里的airmon-ng工具来实现，具体命令如下：</p>

<!-- more -->


<pre><code>#airmon-ng start wlan0 
</code></pre>

<p>步骤3：探测无线网络，抓取无线数据包。</p>

<p>在激活无线网卡后，我们就可以开启无线数据包抓包工具了，这里我们使用Aircrack-ng套装里的airmon-ng工具来实现，具体命令如下：</p>

<p>不过在正式抓包之前，一般都是先进行预来探测，来获取当前无线网络概况，包括AP的SSID、MAC地址、工作频道、无线客户端MAC及数量等。只需打开一个Shell，输入具体命令如下：</p>

<pre><code>#airodump-ng mon0 
</code></pre>

<p>参数解释：</p>

<p>mon0为之前已经载入并激活监听模式的无线网卡。如下图8所示。</p>

<p>既然我们看到了本次测试要攻击的目标，就是那个SSID名为TP-LINK的无线路由器，接下来输入命令如下：</p>

<pre><code>#airodump-ng --ivs –w longas -c 6 wlan0 
</code></pre>

<p>参数解释：</p>

<p>&#8211;ivs 这里的设置是通过设置过滤，不再将所有无线数据保存，而只是保存可用于破解的IVS数据报文，这样可以有效地缩减保存的数据包大小；</p>

<p>-c 这里我们设置目标AP的工作频道，通过刚才的观察，我们要进行攻击测试的无线路由器工作频道为6；</p>

<p>-w 后跟要保存的文件名，这里w就是“write写”的意思，所以输入自己希望保持的文件名，如下图10所示我这里就写为longas。那么，小黑们一定要注意的是：这里我们虽然设置保存的文件名是longas，但是生成的文件却不是longase.ivs，而是longas-01.ivs。</p>

<p>图10</p>

<p>注意：这是因为airodump-ng这款工具为了方便后面破解时候的调用，所以对保存文件按顺序编了号，于是就多了-01这样的序号，以此类推，在进行第二次攻击时，若使用同样文件名longas保存的话，就会生成名为longas-02.ivs的文件，一定要注意哦，别到时候找不到又要怪我没写清楚：）</p>

<p>啊，估计有的朋友们看到这里，又会问在破解的时候可不可以将这些捕获的数据包一起使用呢，当然可以，届时只要在载入文件时使用longas*.cap即可，这里的星号指代所有前缀一致的文件。</p>

<p>在回车后，就可以看到如下图11所示的界面，这表示着无线数据包抓取的开始。</p>

<p>图11
airodump-ng -c 6  -w &lt;文件名> &#8211;ivs mon0</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim查找替换]]></title>
    <link href="http://zodiac1111.github.com/blog/2012/08/21/vim-search-replace/"/>
    <updated>2012-08-21T17:15:00+08:00</updated>
    <id>http://zodiac1111.github.com/blog/2012/08/21/vim-search-replace</id>
    <content type="html"><![CDATA[<p><code>#vim查找替换</code>
参考资料:http://www.chinavim.org/vivim-%E6%9F%A5%E6%89%BE%E6%9B%BF%E6%8D%A2%E5%A4%A7%E5%85%A8.html</p>

<p> 可以使用 # 作为分隔符，此时中间出现的 / 不会作为分隔符</p>

<p> :替换当前行第一个 vivian/ 为 sky/</p>

<p> <code>:n,$s/vivian/sky/</code> 替换第 n 行开始到最后一行中每一行的<strong>第一个</strong> vivian 为 sky</p>

<p> <code>:n,$s/vivian/sky/g</code> 替换第 n 行开始到最后一行中每一行<strong>所有</strong> vivian 为 sky
<code>
:[地址/范围]s/&lt;搜索字&gt;/&lt;替换字&gt;[/g]
</code></p>

<!-- more -->


<ol>
<li>地址/范围有:
<code>
无 :当前行
1,10 : 1~10行
1,$  :1~最后一行/文件结束 ps : 1,$ 等价于 %
.,.+10 从当前行(".") 到偏置10行(".+10") "+"表示向下偏移 "-"表示向上偏移
</code></li>
<li>s : sed 风格的搜索</li>
<li>/ : 分割符</li>
<li>g : 表示继续匹配(没有 表示匹配一次)</li>
</ol>


<p>(n 为数字，若 n 为 .&lt;句号>，表示从当前行开始到最后一行)</p>

<h2>删除</h2>

<p>删除括号内的东西 不包含括号 di) =delet in )<br/>
光标在一个word内部删除这个整个单词 diw  del in word<br/>
删除并进入insert模式方便修改 ciw change in word</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[set]]></title>
    <link href="http://zodiac1111.github.com/blog/2012/08/21/set/"/>
    <updated>2012-08-21T17:15:00+08:00</updated>
    <id>http://zodiac1111.github.com/blog/2012/08/21/set</id>
    <content type="html"><![CDATA[<h1>查看和设定vi的选项</h1>

<p>:set
:set all
查看设定选项</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fedora 17 x86_64安装配置TFTP服务器]]></title>
    <link href="http://zodiac1111.github.com/blog/2012/07/03/Fedora-17-x86_64-tftp/"/>
    <updated>2012-07-03T10:58:00+08:00</updated>
    <id>http://zodiac1111.github.com/blog/2012/07/03/Fedora-17-x86_64-tftp</id>
    <content type="html"><![CDATA[<blockquote><p>http://www.oklinux.cn/html/network/ser/20090729/72351.html</p></blockquote>

<hr />

<p>f17下有些东西有所改变,网上一些教程略显陈旧.</p>

<h3>安装环境：Fedora</h3>

<p>1.安装xinetd<br/>
这是一个守护程序(?)</p>

<pre><code>yum install xinetd
</code></pre>

<p>2.安装tftp server(ftp服务器)</p>

<pre><code>yum install tftp tftp-server
</code></pre>

<p>3.更改tftp配置文件 <code>/etc/xinetd.d/tftp</code></p>

<!-- more -->


<p><code>vi /etc/xinetd.d/tftp</code>,打开tftp文件，设置tftp的跟目录，开启服务。（没有安装tftp-server之前，不存在tftp文件）</p>

<pre><code>service tftp
{
    socket_type = dgram
    protocol = udp
    wait = yes
    user = root
    server = /usr/sbin/in.tftpd
    #tftp服务器跟目录
    #-c 表示服务端可以创建(create)文件.
    #更多 man tftpd
    server_args = -c -s /home/gerry/tftpboot  
    #disable = yes 
    disable = no
    per_source = 11
    cps = 100 2
    flags = IPv4
}
</code></pre>

<p>在上述server_args设置tftp的工作目录<br/>
并且注释掉disable选项或者改成no使能tftp服务。</p>

<p>4.在<code>/home/gerry</code>下创建tftpboot目录，并且修改权限</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir tftpboot
</span><span class='line'>chmod 777 tftpboot/</span></code></pre></td></tr></table></div></figure>


<p>5.启动tftp服务器</p>

<pre><code>service xinetd restart
</code></pre>

<p>现在已经被重定向,提示:<code>Redirecting to /bin/systemctl  restart xinetd.service</code><br/>
没什么影响,推荐按照重定向的命令执行来开启tftp服务<code>/bin/systemctl  restart xinetd.service</code></p>

<p>ps:selinux 和防火墙都可能(一定)使服务生效但无法访问!
粗暴但有效的解决办法 关闭syslinux 和防火墙</p>

<h4>selinux</h4>

<p>*临时关闭SELinux。如果你仅仅只是想临时关闭，可以输入</p>

<pre><code>setenforce 0
</code></pre>

<p>禁用SELinux。在 /etc  下可以看到一个SELinux文件夹，进入后，里面有个config文件，在终端进入到文件夹，输入</p>

<pre><code>vi config
</code></pre>

<p>更改其中的SELINUX项的值就可以关闭和启用SELinux服务了。
修改成  SELINUX=disable     禁用SeLinux
修改成  SELINUX=enforcing 使用SeLinux</p>

<h4>精准的防火墙设置</h4>

<blockquote><p>http://himme007.blog.163.com/blog/static/3466802520095742420660/</p></blockquote>

<p>修改<code>/etc/sysconfig/iptables</code>文件，添加以下内容：</p>

<pre><code>-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT  
</code></pre>

<p>各项参数含义暂时不甚了解,详情搜索iptables.</p>

<h1>参考文献</h1>

<p>tftpd设定<a href="http://std.sssh.tp.edu.tw/lesson/linux/tftp.htm">TFTP Trivial File Transfer Protocol</a><br/>
防火墙设置 http://himme007.blog.163.com/blog/static/3466802520095742420660/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello world]]></title>
    <link href="http://zodiac1111.github.com/blog/2012/06/03/hello-world/"/>
    <updated>2012-06-03T09:01:00+08:00</updated>
    <id>http://zodiac1111.github.com/blog/2012/06/03/hello-world</id>
    <content type="html"><![CDATA[<p>这是一个沙盒,测试各种不成熟的东西.</p>

<!-- more -->


<p>测试程序:测试2</p>

<h1>代码测试</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int main()
</span><span class='line'>{
</span><span class='line'>  int i;
</span><span class='line'>  return 0;
</span><span class='line'>}
</span><span class='line'>$ sudo make me a sandwich</span></code></pre></td></tr></table></div></figure>


<h1>影片测试</h1>

<div class="video-container">
    <embed src="http://player.youku.com/player.php/sid/XNDQ4ODQxNTI0/v.swf" allowFullScreen="true" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed>
</div>


<h1>图片测试</h1>

<p><img src="http://placekitten.com/890/280">
Bacon ipsum dolor sit amet exercitation ball tip consectetur tempor. Biltong exercitation aliqua, ribeye consequat veniam consectetur.
Aliquip nulla do tempor, ball tip dolore anim esse strip steak nisi nostrud. Tri-tip mollit deserunt ut duis, commodo brisket short loin est hamburger sunt consequat rump meatloaf. Exercitation enim aliqua tempor dolore. Non eu venison, officia boudin tri-tip enim beef ribs flank cupidatat in aute. Tail voluptate fugiat aute flank, venison sint.
Filler text courtesy of Bacon Ipsum, Images courtesy of Place Kitten.
Brisket quis velit bresaola. Pork loin pork chop beef duis. Short loin fugiat officia short ribs magna. Ullamco eu proident jerky, fugiat chuck nostrud ham rump meatloaf eiusmod adipisicing. Qui et reprehenderit, magna biltong consequat short ribs pancetta. Tail tenderloin sausage, hamburger corned beef drumstick ad. Eu labore enim velit.
<img class="left" src="http://placekitten.com/320/250" title="Place Kitten #2" ></p>

<p><img class="right" src="http://placekitten.com/300/500" width="150" height="250" title="Place Kitten #3" ></p>

<p><img class="right" src="http://placekitten.com/300/500" width="150" height="250" title="Place Kitten #4" alt="An image of a very cute kitten"></p>
]]></content>
  </entry>
  
</feed>
